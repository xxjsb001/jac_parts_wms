package com.vtradex.wms.server.service.interfaces.pojo;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.sql.DataSource;

import org.hibernate.HibernateException;
import org.hibernate.SQLQuery;
import org.hibernate.Session;
import org.hibernate.Transaction;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.orm.hibernate3.HibernateTransactionManager;
import org.springframework.orm.hibernate3.support.HibernateDaoSupport;

import com.vtradex.thorn.server.exception.BusinessException;
import com.vtradex.thorn.server.service.pojo.DefaultBaseManager;
import com.vtradex.wms.server.model.base.BaseStatus;
import com.vtradex.wms.server.model.base.Contact;
import com.vtradex.wms.server.model.base.LotInfo;
import com.vtradex.wms.server.model.base.ShipLotInfo;
import com.vtradex.wms.server.model.move.WmsMoveDocStatus;
import com.vtradex.wms.server.model.organization.WmsBillType;
import com.vtradex.wms.server.model.organization.WmsEnumType;
import com.vtradex.wms.server.model.organization.WmsItem;
import com.vtradex.wms.server.model.organization.WmsLotRule;
import com.vtradex.wms.server.model.organization.WmsOrganization;
import com.vtradex.wms.server.model.organization.WmsPackageUnit;
import com.vtradex.wms.server.model.organization.WmsStationAndItem;
import com.vtradex.wms.server.model.receiving.WmsASN;
import com.vtradex.wms.server.model.receiving.WmsASNDetail;
import com.vtradex.wms.server.model.receiving.WmsASNShelvesStauts;
import com.vtradex.wms.server.model.receiving.WmsASNStatus;
import com.vtradex.wms.server.model.receiving.WmsSource;
import com.vtradex.wms.server.model.shipping.WmsPickTicket;
import com.vtradex.wms.server.model.shipping.WmsPickTicketDetail;
import com.vtradex.wms.server.model.shipping.WmsPickTicketStatus;
import com.vtradex.wms.server.model.warehouse.WmsWarehouse;
import com.vtradex.wms.server.service.interfaces.WmsDealInterfaceDataManager;
import com.vtradex.wms.server.service.middle.MiddleTableName;
import com.vtradex.wms.server.service.middle.MilldleSessionManager;
import com.vtradex.wms.server.service.sequence.WmsBussinessCodeManager;
import com.vtradex.wms.server.utils.DateUtil;
import com.vtradex.wms.server.utils.MyUtils;

public class DefaultWmsDealInterfaceDataManager  
				extends DefaultBaseManager implements WmsDealInterfaceDataManager{

	public static Integer PAGE_NUMBER = 500;
	private WmsBussinessCodeManager codeManager;
	private MilldleSessionManager milldleSessionManager;
	//数据源readMidQuality
	private DataSource dataSource;
	private JdbcTemplate jdbcTemplate; 
	private JdbcTemplate jdbcTemplateExt1;
	
	
	public MilldleSessionManager getMilldleSessionManager() {
		return milldleSessionManager;
	}
	public void setMilldleSessionManager(MilldleSessionManager milldleSessionManager) {
		this.milldleSessionManager = milldleSessionManager;
	}
	public DataSource getDataSource() {
		return dataSource;
	}
	public void setDataSource(DataSource dataSource) {
		this.dataSource = dataSource;
	}
	public WmsBussinessCodeManager getCodeManager() {
		return codeManager;
	}
	public void setCodeManager(WmsBussinessCodeManager codeManager) {
		this.codeManager = codeManager;
	}
	public JdbcTemplate getJdbcTemplate() {
		return jdbcTemplate ;
	}
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}
	
	public JdbcTemplate getJdbcTemplateExt1() {
		return jdbcTemplateExt1;
	}
	public void setJdbcTemplateExt1(JdbcTemplate jdbcTemplateExt1) {
		this.jdbcTemplateExt1 = jdbcTemplateExt1;
	}
	public void mesReturnOrder(){
		logger.error("-----------开始处理MES退料单数据-----------");
		WmsWarehouse warehouse = getwareHouse();//仓库
		//处理MES退料单数据
		String mesOrderSql = "select id,ASNNO,PONO,ITEMCODE,SUPPLY_NO,"
				+ "STORECODE,UNIT,SENDQTY,REQDATE,ORD_TYPE,IS_MT,TRAYQTY "
				+ " from "+MiddleTableName.W_ASN_TL+" where status=1"
				+ " ORDER BY upper(ASNNO) desc";
		dealMesAndSrmData(warehouse,mesOrderSql,MiddleTableName.W_ASN_TL);
		logger.error("-----------结束处理MES退料单数据-----------");
	}
	
	@Override
	public void srmOrder(){
		logger.error("-----------开始处理SRM中间表数据-----------");
		WmsWarehouse warehouse = getwareHouse();//仓库
		//处理SRM数据
		String srmOrderSql = "select id,ASNNO,PONO,ITEMCODE,SUPPLY_NO,STORECODE,UNIT,"
								+ "SENDQTY,REQDATE,ORD_TYPE,IS_MT,TRAYQTY from "
								+ MiddleTableName.W_ASN_SRM+" where status = 1 "
								+ "ORDER BY upper(ASNNO) desc";
			
		dealMesAndSrmData(warehouse,srmOrderSql,MiddleTableName.W_ASN_SRM);
		logger.error("-----------结束处理SRM中间表数据-----------");
	}
	
	@Override
	public void dealErpOrder() {
		WmsWarehouse warehouse = getwareHouse();//仓库
		logger.error("-----------开始处理临采件入库数据-----------");
		//处理ERP数据
		String erpSql = "select id,ASNNO,PONO,ITEMCODE,SUPPLY_NO,STORECODE,"
							+ "UNIT,SENDQTY,REQDATE,ORD_TYPE,IS_MT,TRAYQTY "
							+ "from "+MiddleTableName.W_ASN_ERP+" where status = 1 "
							+ "ORDER BY upper(ASNNO) desc";
		dealMesAndSrmData(warehouse,erpSql,MiddleTableName.W_ASN_ERP);
		logger.error("-----------结束处理临采件入库数据-----------");
	}
	//公用处理接口数据的方法
	void dealMesAndSrmData(WmsWarehouse warehouse,String sql,String tableName){
		
		
//		HibernateTransactionManager transactionManager = (HibernateTransactionManager)
//				applicationContext.getBean("transactionManager");
//		Session session = transactionManager.getSessionFactory().openSession();
		
		List<String> errorLog = new ArrayList<String>();//记录每条错误日志
		List<String> lastError = new ArrayList<String>();//记录每批所有错误日志,只有当lastError.size=0,才能保存这批数据到WMS
		List<Long> ids = new ArrayList<Long>();//更新每批正确数据的状态和错误信息
		
		List<String> odrNos = new ArrayList<String>();//记录送货单号,当每批送货单号数据都没问题,再创建ASN
		List<Object[]> tempDatas = new ArrayList<Object[]>();//存储每批接口(一个送货单号为一批)数据
		Boolean batchFlag = Boolean.FALSE;//batchFlag=false=没检验,true代表每批的送货单号已经校验过了
		Long count = 0l;//count>0 代表送货单号已经存在
		
		List list = jdbcTemplateExt1.queryForList(sql);
		Iterator asnList = list.iterator();
		while(asnList.hasNext()){
			Map map = (Map) asnList.next();//行数据
			Long id = (Long) map.get("ID");//id 0
			try{
				String relateBill1 = map.get("ASNNO").toString();//送货单号 1
				String poNo = map.get("PONO") == null ? null : map.get("PONO").toString();//订单号 2
				String itemCode = map.get("ITEMCODE").toString().toUpperCase();//货品编码 3
				String supplyNo = map.get("SUPPLY_NO").toString().toUpperCase();//供应商编码 4
				String fware = map.get("STORECODE").toString().toUpperCase();//货主 5
				String unit = map.get("UNIT").toString();//包装单位 6
				Double qty =  (Double) map.get("SENDQTY");//数量 7
				Date demandDate = (Date) map.get("REQDATE");//生产日期 8
				String billCode = map.get("ORD_TYPE").toString().toUpperCase();//单据类型 9
				Boolean isMt = (Integer)map.get("IS_MT") == 1 ? Boolean.TRUE : Boolean.FALSE;
				Integer palletNo = (Integer) map.get("TRAYQTY");//托盘总个数
				
				
				if(!odrNos.contains(relateBill1)){
					odrNos.add(relateBill1);//记录送货单号
				}
				
				if(odrNos.size() > 1){//根据送货单号进行分组一批一批处理
					//如果第一批数据没问题,保存到WMS,有问题的话就忽略,清空errorLog,tempDatas,odrNos
					if(lastError.size() == 0){
						saveAsnData(tempDatas,warehouse,tableName,errorLog);
					}else{
						if(ids.size() > 0){//如果这批数据有成功的,就更新其状态为失败
							updateMiddleStatusByBatch(tableName, ids,Boolean.TRUE);
							ids.clear();//清空id list
						}
					}
					tempDatas.clear();//清空数据和错误信息,继续处理下一批
					lastError.clear();//清空每批错误信息
					batchFlag = Boolean.FALSE;//重置flag
					count = 0l;//清空count
					odrNos.clear();//odrNos>1说明已经处理第二批了,这个时候需要把odrNos清空,tempDatas保存到wms,然后再处理下一批
					odrNos.add(relateBill1);//记录送货单号
				}
				
				if(!batchFlag){//batchFlag=true 避免重复校验
					count = isExistRelateBill(relateBill1,Boolean.TRUE,errorLog);//判断送货单号是否存在
					batchFlag = Boolean.TRUE;
				}
				if(null != count && count > 0){
					errorLog.add("送货单号:"+relateBill1+"已经存在,请检查!!\n");
				}
				
				//数据校验
				WmsOrganization company = validateOrg(errorLog, fware,"hz",Boolean.TRUE);//货主
				WmsItem item = validateItem(errorLog, itemCode,fware,Boolean.FALSE);//物料
				WmsOrganization supplier = validateOrg(errorLog, supplyNo,"gys",Boolean.TRUE);//供应商
				WmsBillType type = validateBillType(errorLog, billCode,fware);//单据类型
				WmsPackageUnit packageUnit = validatePackageUnit(errorLog, item,unit);//包装单位
				
				if(errorLog.size() == 0){//如果数据没问题,保存到tempDatas
					tempDatas.add(new Object[]{id,relateBill1,poNo,
							item,supplier,company,packageUnit,qty,demandDate,
							type,isMt,palletNo});//单条数据校验通过,存入临时list
					ids.add(id);//将正确数据存入id list
					
				}else{//如果有错误信息,记录错误信息以及更新状态
					updateMiddleStatus(tableName, errorLog, id);
					lastError.add(errorLog.toString());//每批中所有错误日志
					errorLog.clear();//保存每条错误日志
				}
			}catch(Exception e){
				e.printStackTrace();
				errorLog.add(e.getMessage());//添加到错误列表,保存到数据库
				updateMiddleStatus(tableName, errorLog, id);
			}	
		}
		
		/**处理最后一批数据,上面逻辑是只有到了下一批才会去处理上一批的数据,这样会导致最后一批的数据搁置未处理*/
		if(lastError.size() == 0){
			saveAsnData(tempDatas,warehouse,tableName,errorLog);
		}
		if(ids.size() > 0){//如果这批数据有成功的,就更新其状态为失败
			updateMiddleStatusByBatch(tableName, ids,Boolean.TRUE);
			ids.clear();//清空id list
		}
		tempDatas.clear();//清空数据和错误信息,继续处理下一批
		errorLog.clear();
		odrNos.clear();//odrNos>1说明已经处理第二批了,这个时候需要把odrNos清空,tempDatas保存到wms,然后再处理下一批
	}
	
	/**
	 * @param objs = 临时中间表数据
	 * 新建ASN
	 */
	void saveAsnData(List<Object[]> tempDatas,WmsWarehouse warehouse,
			String tableName,List<String> errorLog){
		Date date = new Date();
		int i = 1;//标记生成ASN还是明细,以及生成行号
		Integer lineNo = 10;//行号
		WmsASN asn = null;
		List<Long> ids = new ArrayList<Long>();//中间表数据id
		Double totalQty = 0D;//ASN总数
		
		for(Object[] obj : tempDatas){
			Long id = ((BigDecimal) obj[0]).longValue();
			String relateBill1 = (String) obj[1];//送货单号
			String orderNo = obj[2].toString().toUpperCase();//订单号
			Double qty =  ((BigDecimal) obj[7]).doubleValue();//数量
			Date demandDate = (Date) obj[8];//生产日期
			Boolean isMt = ((BigDecimal)obj[10]).intValue() 
							== 1 ? Boolean.TRUE : Boolean.FALSE;//是否码托
			Integer palletNo = ((BigDecimal) obj[11]).intValue();//托盘总个数
			WmsOrganization company = (WmsOrganization) obj[5] ;//货主
			WmsItem item = (WmsItem)obj[3] ;//货品
			WmsOrganization supplier = (WmsOrganization) obj[4] ;//供应商
			WmsBillType type = (WmsBillType) obj[9] ;//单据类型
			WmsPackageUnit packageUnit = (WmsPackageUnit) obj[6];//包装
			String asnCode = getCodeByRule(errorLog, company, type, warehouse, "ASN");//获取单据编码
			
			if(i == 1){
				asn = new WmsASN(warehouse, company, type, asnCode,WmsASNStatus.OPEN, relateBill1,
						orderNo,date,WmsASNShelvesStauts.UNPUTAWAY,supplier,WmsMoveDocStatus.OPEN,
						0d, WmsSource.INTERFACE,qty,Boolean.FALSE);
				commonDao.store(asn);
			}
			
			WmsASNDetail detail = new WmsASNDetail(asn, lineNo*i, item, qty, packageUnit, qty, 0d, 0d, palletNo, 0.0,isMt);
			LotInfo lotInfo = new LotInfo(demandDate, asn.getCode(), supplier, "-");
			detail.setLotInfo(lotInfo);
			commonDao.store(detail);
			i += 1;
			ids.add(id);
			totalQty += qty;
		}	
		//更新状态
		updateMiddleStatusByBatch(tableName,ids,Boolean.FALSE);
		updateTotalQty(null, asn, totalQty);//更新单头数量
	}
	
	/**
	 * @param errorLog
	 * @param fware
	 * @param type = 供应商/货主
	 * @param notNull = true 不能为空 false=可为空,不记错误信息
	 * @return
	 */
	WmsOrganization validateOrg(List<String> errorLog,String fware,String type,Boolean notNull){
		String hql = "from WmsOrganization o where o.code=:code";
		WmsOrganization org = (WmsOrganization) commonDao.findByQueryUniqueResult(hql, "code", fware);
		if(null == org && notNull){
			if("hz".equals(type)){
				errorLog.add("根据编码("+fware+")未找到对应的货主!\n");
			}else{
				errorLog.add("根据编码("+fware+")未找到对应的供应商!\n");
			}
		}
		hql = null;
		return org;
	}
	
	/**
	 * @param errorLog
	 * @param itemCode
	 * @param companyCode
	 * @param isNull == true 如果没有找到货品,不记录错误信息
	 * @return
	 */
	WmsItem validateItem(List<String> errorLog,String itemCode,String companyCode,Boolean isNull){
		String hql = "from WmsItem item where item.code=:code and status='ENABLED' AND company.code=:companyCode";
		WmsItem item = (WmsItem) commonDao.findByQueryUniqueResult(hql, 
										new String[]{"code","companyCode"}, 
											new Object[]{itemCode,companyCode});
		if(null == item && !isNull){
			errorLog.add("根据编码("+itemCode+")+货主("+companyCode+")未找到对应的货品!\n");
		}
		if(null != item && isNull){//货品已经存在,记录错误信息
			errorLog.add("根据编码("+itemCode+")+货主("+companyCode+")已经找到了对应货品!\n");
		}
		hql = null;
		return item;
	}
	
	WmsBillType validateBillType(List<String> errorLog,String billCode,String companyCode){
		String hql = "from WmsBillType where code=:code and status='ENABLED' and company.code=:companyCode";
		WmsBillType bType = (WmsBillType) commonDao.findByQueryUniqueResult(hql, 
										new String[]{"code","companyCode"},
												new Object[]{billCode,companyCode});
		if(null == bType){
			errorLog.add("根据编码("+billCode+")+货主("+companyCode+")未找到对应的单据类型!\n");
		}
		hql = null;
		return bType;
	}
	
	/**
	 * 校验接口表中包装单位与wms货品对应的包装单位是否一致
	 * @param errorLog
	 * @param item
	 * @param unit
	 * @return
	 */
	WmsPackageUnit validatePackageUnit(List<String> errorLog, WmsItem item,String unit){
		if(item == null){
			return null;
		}
		@SuppressWarnings("unchecked")
		List<WmsPackageUnit> list = commonDao.
				findByQuery("from WmsPackageUnit where item_id=:id","id",
						item.getId());//包装单位
		if(list.size() <= 0){
			errorLog.add("根据物料编码("+item.getCode()+")未找到包装单位,请检查!!\n");
			return null;
		}
		if(null == unit || "".equals(unit)){//如果PCS为空,说明当前表里没有PCS字段,不校验包装单位
			return list.get(0);
		}
		if(!unit.equals(list.get(0).getUnit())){
			errorLog.add("物料编码的包装单位与接口表中的包装单位不符,请检查!!\n");
		}
		return list.get(0);
	}
	
	WmsWarehouse getwareHouse(){
		WmsWarehouse warehouse = (WmsWarehouse) commonDao.findByQueryUniqueResult
							("from WmsWarehouse where name='新港仓库' and status='ENABLED'","","");
		if(null == warehouse){
			throw new BusinessException("未找到新港仓库");
		}
		return warehouse;
	}
	
	/**
	 * 获取数据库连接
	 * @return
	 */
	private Connection getConnection() {
		Connection connection = null;
		try {
			connection = dataSource.getConnection();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return connection;
	}
	
	/**
	 * 关闭连接
	 * @param rs
	 * @param ps
	 * @param connection
	 */
	private void closeConnection(ResultSet rs ,PreparedStatement ps,Connection connection){
		try {
			if (rs != null) { // 关闭记录集
				rs.close();
			}
		} catch (Exception e) {
			e.printStackTrace();
		} finally {
			try {
				if (ps != null) { // 关闭声明
					ps.close();
				}
			} catch (Exception e) {
				e.printStackTrace();
			} finally {
				if (connection != null) { // 关闭连接对象
					try {
						connection.close();
					} catch (Exception e) {
						e.printStackTrace();
					}
				}
			}

		}
	}
	@Override
	public void dealAsnData(WmsASN asn) {
		String hql = "from WmsASNDetail d where d.receivedQuantityBU > 0 and d.asn.id=:id";
		@SuppressWarnings("unchecked")
		List<WmsASNDetail> details = commonDao.findByQuery(hql,"id",asn.getId());
		Date date = new Date();
		int i = 0;//行号
		Connection connection = getConnection();
		if(null == connection){
			throw new BusinessException("数据库连接失败!!!");
		}
		PreparedStatement pre = null;
		ResultSet rs = null;
		for(WmsASNDetail detail : details){
			i += 1;
			Long maxId = getMaxId(pre,rs,connection,MiddleTableName.W_RECEIVE_ERP);
			String sql = "insert into "+MiddleTableName.W_RECEIVE_ERP+" (ASNNO,"
					+ "SHDH,LINE_NO,ORDER_CODE,ORDER_LINE_NO, REC_QTY, INV_LOC, UNIT, "
					+ "ITEMCODE, SUPPLY_CODE,ORDER_TYPE, RECEIVE_DATE, STATUS,ID)"
					+ "values (?, ?, ?, ?,?,?,?,?,?,?,?,?,?,?)";
			try {
				pre = connection.prepareStatement(sql);
				pre.setString(1,asn.getCode());//收货单号
				pre.setString(2, asn.getRelatedBill1());//SRM收货单号
				pre.setInt(3,i);//收货单行号
				pre.setString(4, asn.getRelatedBill2());//订单号
				pre.setInt(5, i);//订单行号
				pre.setDouble(6, asn.getReceivedQuantityBU());//收货数量
				pre.setString(7, asn.getWarehouse().getCode());//仓库代码
				pre.setString(8, detail.getPackageUnit().getUnit());//包装单位
				pre.setString(9, detail.getItem().getCode());//货品代码
				pre.setString(10, detail.getLotInfo().getSupplier().getCode());//供应商
				pre.setString(11, asn.getBillType().getCode());//单据类型
				pre.setDate(12, new java.sql.Date(date.getTime()));//收货日期
				pre.setInt(13, 1);//状态
				pre.setLong(14, maxId);//状态
				pre.executeUpdate();
			} catch (SQLException e) {
				e.printStackTrace();
				closeConnection(rs, pre, connection);
				throw new BusinessException("处理失败："+e.getMessage());
			}
		}
		closeConnection(rs, pre, connection);
	}
	
	public Long getMaxId(PreparedStatement pre,ResultSet rs,
						Connection connection,String tableName){
		Long maxId = 1l;
		String sql = "select MAX(id) from "+tableName;
		try {
			pre = connection.prepareStatement(sql);
			rs = pre.executeQuery();// 执行查询，注意括号中不需要再加参数
			if(rs.next()){
				maxId = rs.getLong(1) + 1;
			}
		}catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}
		return maxId;
	}
	
	@Override
	public void dealOrderJh(){
		WmsWarehouse warehouse = getwareHouse();//新港仓库
		//MES料单
		String orderJhSql = "select id,ODR_NO,ODR_TYPE,DEMAND_DATE,SUPPLY_NO,ITEM,"
								+ "QTY,FWARE,ODR_SU,DWARE,PRODUCT_LINE,SHDK,IS_JP,"
								+ "BATCH,STATION,SLR from "+MiddleTableName.W_ORDER_JH
								+" where status  = 1 ORDER BY upper(ODR_NO) desc";
		
		createPickTicketByMiddleData(warehouse,orderJhSql,MiddleTableName.W_ORDER_JH);
	}
	
	public void dealOrderSps(){
		logger.error("-----------开始处理时序件料单中间表数据-----------");
		WmsWarehouse warehouse = getwareHouse();//新港仓库
		//时序件料单
		String orderSxSql = "select id,ODR_NO,ODR_TYPE,DEMAND_DATE,SUPPLY_NO,"
						+ "ITEM,QTY,FWARE,ODR_SU,DWARE,PRODUCT_LINE,SHDK,IS_JP,"
						+ "BATCH,STATION,SLR,SX,PACKAGE_NO,PACKAGE_NUM,PACKAGE_QTY, "
						+ "REMARK from "+MiddleTableName.W_ORDER_SPS+" where status = 1"
						+ " ORDER BY upper(ODR_NO) desc";
		createPickTicketByMiddleData(warehouse,orderSxSql,MiddleTableName.W_ORDER_SPS);
		logger.error("-----------结束处理时序件料单中间表数据-----------");
	}
	
	@Override
	public void dealOrderKb(){
		WmsWarehouse warehouse = getwareHouse();//新港仓库
		logger.error("-----------开始处理看板件料单中间表数据-----------");
		String orderKbSql = "select id,ODR_NO,ODR_TYPE,DEMAND_DATE,SUPPLY_NO,"
				+ "ITEM,QTY,FWARE,ODR_SU,DWARE,PRODUCT_LINE,SHDK,IS_JP,"
				+ "BATCH,STATION,SX,SMALL_QTY,PCS from "+MiddleTableName.W_ORDER_KB
				+" where status = 1  ORDER BY upper(ODR_NO) desc";
		createPickTicketByMiddleData(warehouse,orderKbSql,MiddleTableName.W_ORDER_KB);
		logger.error("-----------结束处理看板件料单中间表数据-----------");
	}
	
	
	@Override
	public void dealPicketTicketData() {
		logger.error("-----------开始处理临采件调整中间表数据-----------");
		WmsWarehouse warehouse = getwareHouse();//新港仓库
		//临采件调整出库发货单
		String erpSql = "select ID,ODR_NO,ODR_TYPE,DEMAND_DATE,SUPPLY_NO,"
							+ " ITEM,QTY,FWARE,PCS from "+MiddleTableName.W_ORDER_ERP
							+ " where status = 1 ORDER BY upper(ODR_NO) desc";
		createPickTicketByMiddleData(warehouse, erpSql, MiddleTableName.W_ORDER_ERP);
		logger.error("-----------结束处理临采件调整中间表数据-----------");
	}	
	
	void createPickTicketByMiddleData(WmsWarehouse warehouse,String sql,String tableName){
		
		List<String> errorLog = new ArrayList<String>();//记录每条错误日志
		List<String> lastError = new ArrayList<String>();//记录每批错误日志,只有当这批错误日志为空,才可以保存到数据库
		List<Long> ids = new ArrayList<Long>();//每批数据里成功的数据,这一批为为失败的一批
		
		List<String> odrNos = new ArrayList<String>();//记录送货单号,size一直等于1
		List<Object[]> batchData = new ArrayList<Object[]>();//记录每批数据,每个送货单号为一批
		Boolean batchFlag = Boolean.FALSE;//batchFlag=false=没检验,true代表每批的送货单号已经校验过了
		Long count = 0l;//count>0 代表送货单号已经存在
		
		List list = jdbcTemplateExt1.queryForList(sql);
		Iterator iter = list.iterator();
		while(iter.hasNext()){
			Map map = (Map) iter.next();
			Long id = (Long) map.get("ID");// 0 
			try{
				String odrNo = map.get("ODR_NO").toString().toUpperCase();//相关单号 1
				String odrType = map.get("ODR_TYPE").toString().toUpperCase();//单据类型 2
				Date arriveDate = (Date) map.get("DEMAND_DATE");//要求到达日期 3
				String supplyNo = map.get("SUPPLY_NO").toString().toUpperCase();//供应商编码 4
				String itemCode = map.get("ITEM").toString().toUpperCase();//货品编码 5
				Double qty = (Double) map.get("QTY");//数量 6
				String fware = map.get("FWARE").toString().toUpperCase();//货主 7
				String odrSu = getMayNullData(map.get("ODR_SU"));//计划需求公司8
				String dware = getMayNullData(map.get("DWARE"));//目的仓库9
				String productLine = getMayNullData(map.get("PRODUCT_LINE"));//生产线10
				String shdk = getMayNullData(map.get("SHDK"));//收货道口11
				String isJpStr = null;//是否集配12
				String batch = getMayNullData(map.get("BATCH"));//批次 13
				String station = getMayNullData(map.get("STATION"));//工位 14
				/**四个表的差异字段*/
				String pcs = null; // 
				String slr = null;
				Integer sx = 0;
				Double minQty = 0d;
				String packageNo = null;
				Double packageNum = 0d;
				Double packageQty = 0d;
				String remark = null;
				WmsPackageUnit packageUnit = null;//包装单位
				if(!tableName.equals(MiddleTableName.W_ORDER_KB)){
					slr = getMayNullData(map.get("SLR"));//备料工&备料工号 15
				}else{//看板件字段
					sx = map.get("SX") == null ? 0 : (Integer)map.get("SX");//顺序 15
					minQty = map.get("SMALL_QTY") == null ? 0d : (Double)map.get("SMALL_QTY");//16
				}
				if(tableName.equals(MiddleTableName.W_ORDER_SPS)){//时序件料单
					sx = map.get("SX") == null ? 0 : (Integer)map.get("SX");//顺序 16
					packageNo = getMayNullData(map.get("PACKAGE_NO"));//器具型号 17
					packageNum = map.get("PACKAGE_NUM") == null 
									? 0d : (Double)map.get("PACKAGE_NUM");//器具容量18
					packageQty = map.get("PACKAGE_QTY") == null 
							? 0d : (Double)map.get("PACKAGE_QTY");//器具数量19
					remark = getMayNullData(map.get("REMARK"));//备注
				}
				
				if(!odrNos.contains(odrNo)){
					odrNos.add(odrNo);
				}
				
				//数据校验
				WmsOrganization company = validateOrg(errorLog, fware,"hz",Boolean.TRUE);//货主
				WmsItem item = validateItem(errorLog, itemCode,fware,Boolean.FALSE);//物料
				WmsOrganization supplier = validateOrg(errorLog, supplyNo,"gys",Boolean.FALSE);//供应商
				WmsBillType type = validateBillType(errorLog, odrType,fware);//单据类型
				
				if(tableName.equals(MiddleTableName.W_ORDER_ERP)){//临采件
					
					pcs = map.get("PCS").toString();
					packageUnit = validatePackageUnit(errorLog,item,pcs);//包装单位 8
					
					if(odrNos.size() > 1){
						if(lastError.size() == 0 ){
							saveErpData(lastError, warehouse, tableName, batchData);
						}else{//更新失败批里面的部分成功数据状态
							if(ids.size()>0){
								updateMiddleStatusByBatch(tableName, ids, Boolean.TRUE);
								ids.clear();
							}
						}
						lastError.clear();
						batchData.clear();
						odrNos.clear();
						batchFlag = Boolean.FALSE;//重置flag
						count = 0l;//清空count
						odrNos.add(odrNo);
					}
					
					if(!batchFlag){//batchFlag=true 避免重复校验  需要batchFlag重置后再校验
						count = isExistRelateBill(odrNo,Boolean.FALSE,errorLog);//判断送货单号是否存在
						batchFlag = Boolean.TRUE;
					}
					if(null != count && count > 0){
						errorLog.add("送货单号:"+odrNo+"已经存在,请检查!!\n");
					}
					
					if(errorLog.size() == 0){
						batchData.add(new Object[]{id,odrNo,type,//保存通过校验的数据
								arriveDate,supplier,item,qty,company,packageUnit});
						ids.add(id);
					}else{//记录错误信息,将每条的错误信息加到每批错误信息里,清空每条错误信息
						updateMiddleStatus(tableName, errorLog, id);
						lastError.add(errorLog.toString());
						errorLog.clear();
					}
					continue;
				}else{
					if(map.get("IS_JP") != null){//是否集配Y/N
						isJpStr = map.get("IS_JP").toString();
						validateYesOrNo(errorLog,isJpStr,"是否集配只能填Y/N!!\n");//校验是否集配值是否是Y/N
					}else{
						isJpStr = "N";
					}
				}
				
				if(tableName.equals(MiddleTableName.W_ORDER_KB)){//看板件
					pcs = map.get("PCS") == null ? null : map.get("PCS").toString();
					packageUnit = validatePackageUnit(errorLog,item,pcs);//包装单位
				}
				
				if(tableName.equals(MiddleTableName.W_ORDER_SPS)){//时序件料单和MES料单
					validateOdrNo(errorLog,odrNo);//校验送货单号在时序件器具明细表里有没有
				}	
				if(odrNos.size() > 1){
					if(lastError.size() == 0){
						savePickTicketData(lastError, warehouse, tableName, batchData);//保存数据
					}else{//更新失败批里面的部分成功数据状态
						if(ids.size() > 0){
							updateMiddleStatusByBatch(tableName,ids, Boolean.TRUE);
							ids.clear();
						}
					}
					lastError.clear();//清空每批错误信息
					batchData.clear();
					odrNos.clear();
					odrNos.add(odrNo);
					batchFlag = Boolean.FALSE;//重置flag
					count = 0l;//清空count
				}
				
				if(!batchFlag){//batchFlag=true 避免重复校验  需要batchFlag重置后再校验
					count = isExistRelateBill(odrNo,Boolean.FALSE,errorLog);//判断送货单号是否存在
					batchFlag = Boolean.TRUE;
				}
				if(null != count && count > 0){
					errorLog.add("送货单号:"+odrNo+"已经存在,请检查!!\n");
				}
				
				/**数据校验通过,保存到临时每批list*/
				if(errorLog.size() == 0){
					Object[] objArray = null;
					if(tableName.equals(MiddleTableName.W_ORDER_KB)){//看板件数据
						objArray = new Object[]{id,odrNo,type,arriveDate,supplier,//保存通过校验的数据
								item,qty,company,odrSu,dware,productLine,shdk,isJpStr,
								batch,station,sx,minQty,packageUnit};
					}else if(tableName.equals(MiddleTableName.W_ORDER_JH)){//mes料单
						objArray = new Object[]{id,odrNo,type,arriveDate,supplier,
								item,qty,company,odrSu,dware,productLine,shdk,isJpStr,
								batch,station,slr};
					}else{//时序件数据
						objArray = new Object[]{id,odrNo,type,arriveDate,supplier,
								item,qty,company,odrSu,dware,productLine,shdk,isJpStr,
								batch,station,slr,sx,packageNo,packageNum,packageQty,remark};
					}
					batchData.add(objArray);
					ids.add(id);
				}else{//记录错误信息,将每条的错误信息加到每批错误信息里,清空每条错误信息
					updateMiddleStatus(tableName,errorLog, id);
					lastError.add(errorLog.toString());
					errorLog.clear();
				}
			}catch(Exception e){
				e.printStackTrace();
				errorLog.add(e.getMessage());//保存异常信息
				updateMiddleStatus(tableName, errorLog, id);//捕捉到异常后存入数据错误信息子弹
				lastError.add(errorLog.toString());
				errorLog.clear();
			}
		}
		/**处理最后一批数据,上面逻辑是只有到了下一批才会去处理上一批的数据,这样会导致最后一批的数据搁置*/
		
		if(lastError.size() == 0){
			if(tableName.equals(MiddleTableName.W_ORDER_ERP)){//临采件
				saveErpData(lastError, warehouse, tableName, batchData);
			}else{
				savePickTicketData(lastError, warehouse, tableName, batchData);//保存数据
			}	
		}
		
		if(ids.size() > 0){//更新失败批里面的部分成功数据状态
			updateMiddleStatusByBatch(tableName,ids, Boolean.TRUE);
			ids.clear();
		}
		
		lastError.clear();//清空每批错误信息
		batchData.clear();
		odrNos.clear();
	}
	
	/**
	 * 
	 * @param odrNo
	 * @param isAsn = true 收货单,FALSE = 发货单
	 * @return
	 */
	Long isExistRelateBill(String odrNo,Boolean isAsn,List<String> errorLog){
		String hql = "";
		if(isAsn){
			hql = "select count(*) from WmsASN where relatedBill1 = :relatedBill1";
		}else{
			hql = "select count(*) from WmsPickTicket where relatedBill1 = :relatedBill1";
		}
		Long count = (Long) commonDao.findByQueryUniqueResult(hql, "relatedBill1", odrNo);
		return count;
	}
	
	void savePickTicketData(List<String> errorLog,WmsWarehouse warehouse, 
								String tableName,List<Object[]> batchData){
		int i = 1;
		Integer lineNo = 10;
		Double totalQty = 0D;
		WmsPickTicket pickTicket = null;
		Date date = new Date();
		List<Long> ids = new ArrayList<Long>();
		for(Object[] obj : batchData){
			
			String odrNo = obj[1].toString().toUpperCase();//相关单号
			String odrSu = (String) obj[8];//计划需求公司
			String dware = (String) obj[9];//目的仓库
			String productLine = (String) obj[10];//生产线
			String shdk = (String) obj[11];//收货道口
			String isJpStr = obj[12].toString().toUpperCase();//是否集配Y/N
			String batch = (String) obj[13];//批次
			String station = (String) obj[14];//工位
			Date arriveDate = (Date) obj[3];//要求到达日期
			Double qty = ((BigDecimal)obj[6]).doubleValue();//数量
			Long id = ((BigDecimal) obj[0]).longValue();
			Boolean isjp = validateYesOrNo(errorLog,isJpStr,"");
			
			WmsOrganization company = (WmsOrganization) obj[7];//货主
			WmsItem item = (WmsItem) obj[5];//物料
			WmsOrganization supplier = (WmsOrganization) obj[4];//供应商
			WmsBillType type = (WmsBillType) obj[2];//单据类型
			
			String slr = null;
			String pcs = null;
			Double minQty = 0d;
			Integer sx = null;
			
			WmsPackageUnit packageUnit = validatePackageUnit(errorLog, item, null);//包装以wms货品关联的为准
			if(!tableName.equals(MiddleTableName.W_ORDER_KB)){
				slr = (String) obj[15];//备料工&备料工号
			}else{//看板件字段
				sx = ((BigDecimal) obj[15]).intValue() ;
				minQty = ((BigDecimal) obj[16]).doubleValue();
				pcs = (String) obj[17];
//				packageUnit = (WmsPackageUnit) obj[17];//包装单位  
			}
			String code = getCodeByRule(errorLog, company, type, warehouse,  "发货单");//获取单据编码
			if(i == 1){
				pickTicket = new WmsPickTicket(warehouse,company, type, code, odrNo, 
								WmsPickTicketStatus.OPEN, arriveDate, qty, 0d, 0d, 0d,
								dware, shdk,WmsSource.INTERFACE,date,odrSu,batch);
				commonDao.store(pickTicket);
			}
			
			ShipLotInfo shipLotInfo = new ShipLotInfo(supplier == null ? null : supplier.getCode());
			WmsPickTicketDetail detail = new WmsPickTicketDetail(pickTicket, item, 
									shipLotInfo,packageUnit, qty, qty, 0d, 0d, 0d, slr, 
									slr, productLine, station, isjp,lineNo*i,sx,minQty,pcs,supplier);
			if(tableName.equals(MiddleTableName.W_ORDER_SPS)){//时序件料单
				sx = ((BigDecimal) obj[16]).intValue() ;
				String packageNo = (String) obj[17];//器具型号
				Double packageNum = obj[18] == null ? 0d : ((BigDecimal) obj[18]).doubleValue();//器具容量
				Double packageQty = obj[18] == null ? 0d : ((BigDecimal) obj[19]).doubleValue();;//器具数量
				String remark = (String) obj[20];//备注
				detail.setType(packageNo);
				detail.setPackageNum(packageNum);
				detail.setPackageQty(packageQty);
				detail.setRemark(remark);
			}
			commonDao.store(detail);
			i += 1;
			ids.add(id);
			totalQty += qty;
		}
		updateMiddleStatusByBatch(tableName,ids,Boolean.FALSE);//更新中间表状态
		updateTotalQty(pickTicket, null, totalQty);//更新单头数量
	}
	//存储器具明细表
//	void saveSpsApplianceData(List<String> odrNo,Connection con) {
//		CallableStatement callableStatement = null;
//		
//		try {
//			callableStatement = con.prepareCall("{call saveSpsApplianceData(?)}");
//			ArrayDescriptor descriptor = ArrayDescriptor.createDescriptor("TABLES_ARRAY",con);  
//            ARRAY array = new ARRAY(descriptor,con,odrNo.toArray());  
//            callableStatement.setArray(1, array);  
//			callableStatement.execute();
//		} catch (HibernateException e) {
//			e.printStackTrace();
//			throw new BusinessException(e.getMessage());
//		} catch (SQLException ee) {
//			try {
//				 if(callableStatement != null){
//					 callableStatement.close();
//				 }
//			} catch (SQLException e) {
//				e.printStackTrace();
//			}
//			 ee.printStackTrace();
//		}
//	}
	List<Long> validateOdrNo(List<String> errorLog,String odrNo){
		
		String sql = "select id from "+MiddleTableName.W_SPS_APPLIANCE+" where ODR_NO = '"+odrNo+"'";
		List<Long> objs = jdbcTemplate.queryForList(sql);
		if(objs.size() <= 0){
			errorLog.add("根据送货单号("+odrNo+")没有在时序件器具明细表里找到对应数据,请检查!!\n");
		}
		return objs;
	}
	/**
	 * 更新数据状态
	 * @param tableName
	 * @param connection
	 * @param pre
	 * @param errorLog
	 * @param sql
	 */
	void updateMiddleStatus(String tableName,Connection connection,
							PreparedStatement pre,List<String> errorLog,Long id){
		String sql = "update "+tableName+" set status=:status,"
								+ "EXCEPTION_MESS=:errorLog where id="+id;
		try {
			pre = connection.prepareStatement(sql);
			if(errorLog.size() == 0){
				pre.setInt(1,  3);
				pre.setString(2,  "");
			}else{
				pre.setInt(1,  0);
				pre.setString(2,  errorLog.toString());
			}
			pre.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	void updateMiddleStatus(String tableName,List<String> errorLog,Long id){
		String sql = "";
		if(errorLog.size() == 0){
			sql = "update "+tableName+" set status=3,"
					+ "EXCEPTION_MESS='' where id ="+id;
		}else{
			sql = "update "+tableName+" set status=0,"
					+ "EXCEPTION_MESS='"+errorLog.toString()+"' where id="+id;
		}
		jdbcTemplate.update(sql);
	}
	
	/**
	 * 
	 * @param tableName
	 * @param errorLog
	 * @param ids
	 * @param isBatchFail = true 
	 * 	那么单条数据没问题,但是这个送货单号里有其它数据是失败的
	 */
	void updateMiddleStatusByBatch(String tableName,List<Long> ids,Boolean isBatchFail){
		
		String[] sqlArray = new String[ids.size()];//存sql
		
		if(!isBatchFail){
			for(int i = 0; i < ids.size(); i++){
				String sql = "update "+tableName+" set status=3,"
						+ "EXCEPTION_MESS='' where id = "+ids.get(i);
				sqlArray[i] = sql;
			}
		}else{
			for(int i = 0; i < ids.size(); i++){
				String sql = "update "+tableName+" set status=0,"
						+ "EXCEPTION_MESS='批次失败' where id = "+ids.get(i);
				sqlArray[i] = sql;
			}
		}
		
		jdbcTemplate.batchUpdate(sqlArray);
	}
	
	Boolean validateYesOrNo(List<String> errorLog,String value,String msg){
		if(!value.equals("Y") && !value.equals("N")){
			errorLog.add(msg);
			return Boolean.FALSE;
		}else if(value.equals("Y")){
			return Boolean.TRUE;
		}else{
			return Boolean.FALSE;
		}
	}
	
	//保存MES看板件料单
	void saveErpData(List<String> errorLog,WmsWarehouse warehouse,
								String tableName,List<Object[]> objs){
		Integer lineNo = 10;
		int i = 1;
		WmsPickTicket pickTicket = null;
		List<Long> ids = new ArrayList<Long>();
		Double totalQty = 0D;//发货单总数量
		for(Object[] obj : objs){
			
			WmsOrganization company = (WmsOrganization) obj[7];//货主
			WmsItem item = (WmsItem) obj[5];//物料
			WmsOrganization supplier = (WmsOrganization) obj[4];//供应商
			WmsBillType type = (WmsBillType) obj[2];//单据类型
			WmsPackageUnit packageUnit = (WmsPackageUnit) obj[8];//包装单位
			
			Long id = ((BigDecimal) obj[0]).longValue();
			String odrNo = obj[1].toString().toUpperCase();//相关单号
			Date arriveDate = (Date) obj[3];//要求到达日期
			Double qty = ((BigDecimal) obj[6]).doubleValue();//数量
			
			String code = getCodeByRule(errorLog, company, type, warehouse, "发货单") ;//获取单据编码
			
			if(i == 1){
				pickTicket = new WmsPickTicket(warehouse, company, type, code, odrNo, 
						WmsPickTicketStatus.OPEN, qty, 0d, 0d, 0d, WmsSource.INTERFACE,arriveDate);
				commonDao.store(pickTicket);
			}
			
			ShipLotInfo shipLotInfo = new ShipLotInfo(supplier == null ? null : supplier.getCode());
			
			WmsPickTicketDetail detail = new WmsPickTicketDetail(pickTicket, lineNo * i, item, shipLotInfo, 
														packageUnit, qty, qty, 0d, 0d, 0d,supplier);
			commonDao.store(detail);
			i += 1;
			ids.add(id);
			totalQty += qty;
		}
		//更新状态
		updateMiddleStatusByBatch(tableName,ids,Boolean.FALSE);
		updateTotalQty(pickTicket, null, totalQty);//更新单头数量
	}
	
	//更新 发货单/ASN 单头数量
	void updateTotalQty(WmsPickTicket pickTicket,WmsASN asn,Double qty){
		String updateHql = "";
		if(null == asn){
			updateHql = "update WmsPickTicket set "
							+ "expectedQuantityBU=:qtyParam where id="+pickTicket.getId();//更新整单数量
		}else{
			updateHql = "update WmsASN set expectedQuantityBU=:qtyParam where id="+asn.getId();
		}	
		commonDao.executeByHql(updateHql,"qtyParam" , qty);
	}
	
	/**
	 * 获取单据编码,有异常(例如数据未在规则表维护)则保存错误信息
	 * @param errorLog
	 * @param company
	 * @param billType
	 * @param warehouse
	 * @param type
	 * @return
	 */
	String getCodeByRule(List<String> errorLog,WmsOrganization company,
							WmsBillType billType,WmsWarehouse warehouse,String type){
		if(null == warehouse || null == billType || null == billType){
			return null;
		}
		String code = "";
		if(null != company && null != billType){
			try{
				code = codeManager.generateCodeByRule(warehouse, company.getName(),type, billType.getName());
			}catch(Exception e){
				errorLog.add(e.getMessage());
			}
		}
		return code;
	}
	@Override
	public void dealStationAndItemData() {
		logger.error("-----------开始处理器具物料对应关系表数据-----------");
		Connection connection = getConnection();//获取连接
		if(null == connection){
			throw new BusinessException("获取数据库连接失败,请检查!");
		}
//		WmsWarehouse warehouse = getwareHouse();//新港仓库
		List<String> errorLog = new ArrayList<String>();//记录错误信息
		/**器具物料对应关系*/
		String applianceItemMesSql = "select id,APPLIANCE_TYPE,ITEMCODE,FULLAMOUNT,"
							+ " SIZES from "+MiddleTableName.W_APPLIANCE_ITEM_MES
							+ " where STATUS = 1";
		PreparedStatement pre = null;// 创建预编译语句对象，一般都是用这个而不用Statement
		ResultSet result = null;// 创建一个结果集对象
		try {
			pre = connection.prepareStatement(applianceItemMesSql);
			result = pre.executeQuery();// 执行查询，注意括号中不需要再加参数
			while(result.next()){
				Long id = result.getLong(1);//
				String type = result.getString(2);//器具型号
				String itemCode = result.getString(3);//货品编码
				Integer loadage = result.getInt(4);//装载量
				Double size = result.getDouble(5);//尺寸
				WmsItem item = validateItem(errorLog, itemCode);
				
				if(errorLog.size() == 0){
					WmsStationAndItem sai = new WmsStationAndItem(type, item, loadage, size);
					commonDao.store(sai);
					WmsEnumType enumType = new WmsEnumType("xx", type);
					commonDao.store(enumType);
					
					/**更新中间表数据状态=成功,清空错误信息*/
					updateMiddleStatus(MiddleTableName.W_APPLIANCE_ITEM_MES, connection, pre, errorLog,id);
				}else{
					/**更新中间表数据状态=错误,记录错误信息*/
					updateMiddleStatus(MiddleTableName.W_APPLIANCE_ITEM_MES, connection, pre, errorLog,id);
				}
				errorLog.clear();//清空错误信息,继续处理下条数据
			}
		}catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			closeConnection(result, pre, connection);
		}
		logger.error("-----------结束处理器具物料对应关系表数据-----------");
	}
	WmsItem validateItem(List<String> errorLog,String itemCode){
		String hql = "from WmsItem item where item.code=:itemCode and status='ENABLED'";
		WmsItem item = (WmsItem) commonDao.findByQueryUniqueResult(hql, "itemCode", itemCode);
		if(null == item){
			errorLog.add("根据货品编码："+itemCode+"未找到对应的货品!!");
		}
		return item;
	}
	@Override
	public void dealSupplierAndItemData() {
//		logger.error("-----------开始处理供应商物料关系对应表数据-----------");
//		Connection connection = getConnection();//获取连接
//		if(null == connection){
//			throw new BusinessException("获取数据库连接失败,请检查!");
//		}
////		WmsWarehouse warehouse = getwareHouse();//新港仓库
//		List<String> errorLog = new ArrayList<String>();//记录错误信息
//		//器具物料对应关系
//		String applianceItemMesSql = "select id,COMPANY,SUPPLY_NO,ITEMCODE,INV_LOC,SXRQ,"
//							+ "GQRQ from W_SUPPLY_ITEM_ERP where STATUS in (0,1)";
//		PreparedStatement pre = null;// 创建预编译语句对象，一般都是用这个而不用Statement
//		ResultSet result = null;// 创建一个结果集对象
//		String updateHql = "";//根据接口表状态Hql
//		try {
//			pre = connection.prepareStatement(applianceItemMesSql);
//			result = pre.executeQuery();// 执行查询，注意括号中不需要再加参数
//			while(result.next()){
//				Long id = result.getLong(1);//
//				String companyCode = result.getString(2);//货主
//				String supplierCode = result.getString(3);//供应商编码
//				String itemCode = result.getString(4);//货品编码
//				String invLoc = result.getString(5);//寄存林采仓库
//				Date activeDate = result.getDate(6);//生效日期
//				Date gqDate = result.getDate(7);//过期日期 
//			}
//		}catch (SQLException e) {
//			e.printStackTrace();
//		} catch (Exception e) {
//			e.printStackTrace();
//		}finally{
//			closeConnection(result, pre, connection);
//		}
//		logger.error("-----------结束处理供应商物料关系对应表数据-----------");
	}
	@Override
	public void dealErpItemData() {
		logger.error("-----------开始处理物料关系中间表数据("+DateUtil.formatDateToStr(new Date())+")-----------");
		Connection connection = getConnection();//获取连接
		if(null == connection){
			throw new BusinessException("获取数据库连接失败,请检查!");
		}
		List<String> errorLog = new ArrayList<String>();//记录错误信息
		List<String> uniqueKey = new ArrayList<String>();//货主+货品编码唯一
		
		HibernateDaoSupport support = (HibernateDaoSupport) commonDao;
		Session session=support.getHibernateTemplate().getSessionFactory().openSession();//打开Session
		Transaction transaction  = null ;//事务
		
		/**物料基础信息数据*/
		String applianceItemMesSql = "select id,COMPANY,CODE,NAME,UNIT "
				+ "from "+MiddleTableName.W_ITEM_ERP+" where STATUS = 1";
		
		PreparedStatement pre = null;// 创建预编译语句对象，一般都是用这个而不用Statement
		ResultSet result = null;// 创建一个结果集对象
		int i = 0;//数据条数
		try {
			pre = connection.prepareStatement(applianceItemMesSql);
			result = pre.executeQuery();// 执行查询，注意括号中不需要再加参数
			transaction = session.beginTransaction();
			while(result.next()){
				
				String hql = "from WmsLotRule where code='默认批次规则' and status='ENABLED'";
				WmsLotRule lotRule = (WmsLotRule) commonDao.findByQueryUniqueResult(hql, "", "");
				if(null == lotRule){
					errorLog.add("没有找到默认的批次规则,请检查!!\n");
				}
				i += 1;
				Long id = result.getLong(1);//
//				String warehouse = result.getString(2);//仓库
				String itemCode = result.getString(3).toUpperCase();//货品编码2801036Z7245(20150601KY)
				String itemName = result.getString(4).toUpperCase();//货品名称
				String unit = result.getString(5);//包装单位
				
				/**校验数据*/
				List<WmsOrganization> company = getcompanyByItemCode(connection,
									pre,itemCode,errorLog,result);
				for(WmsOrganization com : company){
					String key = itemCode+com.getCode();
					if(uniqueKey.contains(key)){
						errorLog.add("根据货品编码("+com.getCode()+")"
								+ "和物料编码("+itemCode+")在接口表找到重复数据,请检查!!");
					}else{
						uniqueKey.add(key);
					}
				}
				
				if(errorLog.size() == 0){
					try{
						transaction  = session.beginTransaction(); //开启事务
						for(WmsOrganization com : company){
							WmsItem item = new WmsItem(com, itemCode, itemName, 
													unit, BaseStatus.ENABLED,lotRule);//货品
							session.save(item);
							
							WmsPackageUnit packageUnit = new WmsPackageUnit(item, 
												1, unit, BaseStatus.DEFAULT_PACKAGE_LEVEL, 1);//包装
							session.save(packageUnit);
						}
						/**更新中间表数据状态=成功,清空错误信息*/
						updateMiddleStatus(MiddleTableName.W_ITEM_ERP, connection, pre, errorLog,id);
						
						if(i % 500 == 0){//每500条数据提交到数据库,并清空session缓存
							session.flush();
							session.clear();
						}
					}catch(HibernateException he){
						if(null != transaction){
							try{
								transaction.rollback();//有异常就回滚
								logger.error( " transaction.wasRolledBack: "  + transaction.wasRolledBack());  
							}catch(HibernateException he1){
								he1.printStackTrace();
							}	
						}
						he.printStackTrace();
					}
				}else{
					/**更新中间表数据状态=错误,记录错误信息*/
					updateMiddleStatus(MiddleTableName.W_ITEM_ERP, connection, pre, errorLog,id);
				}
				errorLog.clear();//清空错误信息,继续处理下条数据
			}
			transaction.commit();
		}catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			if(null != transaction){
				transaction = null;
				session.close();
			}
			closeConnection(result, pre, connection);
		}
		logger.error("-----------结束处理物料关系中间表数据"+DateUtil.formatDateToStr(new Date())+"-----------");
	}
	
	/**
	 * 根据接口表里的物料编码
	 * 		去供应商物料关系表里查货主,没查到则记录报错信息
	 * @param connection
	 * @param pre
	 * @param itemCode
	 * @param errorLog
	 * @param result
	 * @return
	 */
	List<WmsOrganization> getcompanyByItemCode(Connection connection,PreparedStatement pre,
			String itemCode,List<String> errorLog,ResultSet result){
		List<WmsOrganization> orgs = new ArrayList<WmsOrganization>();//记录货主
		String sql = "select INV_LOC from "
						+ MiddleTableName.W_SUPPLY_ITEM_ERP + " where ITEMCODE=:itemCode";
		try {
			pre = connection.prepareStatement(sql);
			pre.setString(1, itemCode);
			result = pre.executeQuery();
			
			while(result.next()){
				String companyCode = result.getString(1);
				WmsOrganization org = validateOrg(errorLog, companyCode, null, Boolean.FALSE);
				if(null == org){//校验货主在WMS里是否存在
					errorLog.add("根据物料编码("+itemCode+")在"
							+ "供应商物料关系表里找到的货主("+companyCode+")在WMS系统里不存在!\n");
				}else{
					WmsItem item = validateItem(errorLog,itemCode,
							companyCode,Boolean.TRUE);//如果货主已经存在,再校验此货品是否已经存在
					if(null != item){
						errorLog.add("编码("+itemCode+")和货主("+companyCode+")"
								+ "对应的货品在WMS已经存在,请检查!!");
					}
					orgs.add(org);
				}
			}
			if(orgs.size() == 0){
				errorLog.add("根据物料编码("+itemCode+")在供应商物料关系表中未找到对应数据,请检查!!");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return orgs;
	}
	
	@Override
	public void dealErpSupplierData() {
		logger.error("-----------开始处理供应商中间表数据-----------");
		Connection connection = getConnection();//获取连接
		if(null == connection){
			throw new BusinessException("获取数据库连接失败,请检查!");
		}
		List<String> errorLog = new ArrayList<String>();//记录错误信息
		
		/**供应商基础信息数据*/
		String applianceItemMesSql = "select id,COMPANY,SUPPLY_NO,SUPPLY_NAME,"
							+ " PROVINCE,CITY,CONTACT_USER,TEL,MOBILE,FAX,EMAIL,"
							+ " ADDRESS from "+MiddleTableName.W_SUPPLY_ERP
							+ " where STATUS in (0,1)";
		
		PreparedStatement pre = null;// 创建预编译语句对象，一般都是用这个而不用Statement
		ResultSet result = null;// 创建一个结果集对象
		try {
			pre = connection.prepareStatement(applianceItemMesSql);
			result = pre.executeQuery();// 执行查询，注意括号中不需要再加参数
			while(result.next()){
				Long id = result.getLong(1);//
//				String companyCode = result.getString(2);//仓库
				String supplierNo = result.getString(3).toUpperCase().toUpperCase();//供应商编码
				String supplierName = result.getString(4).toUpperCase();//供应商名称
				String province = result.getString(5);//省份
				String city = result.getString(6);//城市
				String contactUser = result.getString(7);//联系人
				String tel = result.getString(8);//电话
				String mobile = result.getString(9);//手机
				String fax = result.getString(10);//传真
				String email = result.getString(11);//邮箱
				String address = result.getString(12);//地址
				
				/**校验数据*/
				WmsOrganization supplier = validateOrg(errorLog,supplierNo,null,Boolean.FALSE);
				if(null != supplier){
					errorLog.add("编码为"+supplierNo+"的供应商在WMS系统已存在,请检查!!\n");
				}
				
				if(errorLog.size() == 0){
					Contact contact = new Contact(contactUser, tel, 
										mobile, fax, email, province, city, address);
					WmsOrganization org = new WmsOrganization(supplierNo, 
										supplierName, contact, BaseStatus.ENABLED);
					commonDao.store(org);
					
					/**更新中间表数据状态=成功,清空错误信息*/
					updateMiddleStatus(MiddleTableName.W_SUPPLY_ERP, connection, pre, errorLog,id);
				}else{
					
					/**更新中间表数据状态=错误,记录错误信息*/
					updateMiddleStatus(MiddleTableName.W_SUPPLY_ERP, connection, pre, errorLog,id);
				}
				errorLog.clear();//清空错误信息,继续处理下条数据
			}
		}catch (SQLException e) {
			e.printStackTrace();
		} catch (Exception e) {
			e.printStackTrace();
		}finally{
			closeConnection(result, pre, connection);
		}
		logger.error("-----------结束处理供应商中间表数据-----------");
		
	}
	
	@Override
	public void dealQisResultData() {
//		logger.error("-----------开始QIS质检结果数据-----------");
//		Map<String,String[]> senderMap = senderMap();
//		HibernateTransactionManager transactionManager = (HibernateTransactionManager)
//				applicationContext.getBean("transactionManager");
//		Session session = transactionManager.getSessionFactory().openSession();
//		try {
//			//CODE-质检单CODE,QUALITY_STATUS-质检状态,PROCESS_STATE-工艺状态,SCRAP_QTY-报损数量,MES_QUALITY_CODE-MES质检单号
//			String sql = "select ID,COMPANY,CODE,ASN_CODE,"
//					+ "SUPPLIER_CODE,MATERIAL_CODE,QUALITY_STATUS,PROCESS_STATE,"
//					+ "SEND_QTY,BACK_QTY,SCRAP_QTY,MES_MEMO,"
//					+ "SENDER,MES_QUALITY_CODE from "+MiddleTableName.MIDDLEQUALITYTESTING
//					+ " where COMPANY = '106' AND FLAG = 2 AND SENDER IS NOT NULL";
////					+ " where CODE= 'JAC_FDJZJ150826000003'";
//			SQLQuery query = session.createSQLQuery(sql);
//			List<Object[]> objs = query.list();
//			//按发送方汇总
//			Map<String,List<Object[]>> detailSenders = senders(objs,new int[]{
//					12
//			});
//			//查询质检状态映射表
//			sql = "select COMPANY,SENDER,WMS_NAME,INTER_FACE_NAME,SCRAP_NAME,MEMO from "+MiddleTableName.MIDDLE_QUALITY_STATUS;
//			query = session.createSQLQuery(sql);
//			List<Object[]> status = query.list();
//			//按发送方汇总(匹配所属的客户,以便正确的获取质检状态)
//			Map<String,List<Object[]>> statusSenders = senders(status,new int[]{
//					1
//			});
//			
//			String sender = null,moveCode=null;
//			String[] wearhouseCompany=null;
//			Iterator<Entry<String, List<Object[]>>> itertor = detailSenders.entrySet().iterator();
//			while(itertor.hasNext()){
//				List<String> nullSenders = new ArrayList<String>();//未匹配到发送方-12
//				List<String> nullItemStatus = new ArrayList<String>();//WMS未维护货品状态信息-13
//				List<Long> nullMoves = new ArrayList<Long>();//无法匹配上质检单的数据-11
//				List<String> nullmidStatus = new ArrayList<String>();//质检状态映射表未维护发送方数据-14
//				List<Long> errStatus = new ArrayList<Long>();//质检状态不能正确匹配WMS-15
//				List<Long> errBackQty = new ArrayList<Long>();//返回数量有误-16
//				List<Long> succIds = new ArrayList<Long>();//返回正常执行完毕数据-3
//				
//				Entry<String, List<Object[]>> entry = itertor.next();
//				sender = entry.getKey();
//				if(!senderMap.containsKey(sender)){
//					nullSenders.add(sender);//未匹配到发送方
//					continue;
//				}
//				wearhouseCompany = senderMap.get(sender);//[warehouse,company]
//				List<String> itemStatus = commonDao.findByQuery("SELECT t.name FROM WmsItemState t"
//						+ " WHERE t.company.id =:companyId GROUP BY t.name", "companyId", Long.parseLong(wearhouseCompany[1]));
//				if(itemStatus==null || itemStatus.size()<=0){
//					nullItemStatus.add(sender);//WMS未维护货品状态信息
//					continue;
//				}
//				if(!statusSenders.containsKey(sender)){
//					nullmidStatus.add(sender);//质检状态映射表未维护发送方数据
//					continue;
//				}
//				Map<String,String[]> midStatus = new HashMap<String, String[]>();
//				for(Object[] o : statusSenders.get(sender)){
//					midStatus.put(o[3].toString(), 
//							new String[]{
//						o[2].toString(),o[4].toString()
//					});//INTER_FACE_NAME,[WMS_NAME,SCRAP_NAME] 
//					//MES回写状态,[wms维护状态(对应BACK_QTY>0回写wms),wms维护报废状态(对应SCRAP_QTY>0回写wms)]
//				}
//				
//				objs = entry.getValue();
//				//按质检单号汇总CODE
//				Map<String,List<Object[]>> movelKeys = senders(objs,new int[]{
//						2
//				});
//				Iterator<Entry<String, List<Object[]>>> itertor1 = movelKeys.entrySet().iterator();
//				while(itertor1.hasNext()){
//					Entry<String, List<Object[]>> entry1 = itertor1.next();
//					moveCode = entry1.getKey();
//					objs = entry1.getValue();
//					//mes质检是一条物料返回一次,同一个质检单号下的明细会存在多次返回
//					@SuppressWarnings("unchecked")
//					List<WmsMoveDocDetail> mdds = commonDao.findByQuery("FROM WmsMoveDocDetail mm"
//							+ " WHERE mm.moveDoc.code =:moveDocCode"
////							+ " AND (mm.moveDoc.transStatus >:transStatus OR mm.moveDoc.transStatus <:transStatus)", 
//							+ " AND mm.processQuantityBU=0",
//							new String[]{"moveDocCode"}, new Object[]{moveCode});
//					if(mdds.size()>0){
//						Object[] backObj = milldleSessionManager.readMidQuality(objs, mdds, midStatus, itemStatus);
//						
//						errStatus.addAll((List<Long>) backObj[0]);
//						errBackQty.addAll((List<Long>) backObj[1]);
//						succIds.addAll((List<Long>) backObj[2]);
//					}else{
//						for(Object[] o : objs){
//							nullMoves.add(Long.parseLong(o[0].toString()));
//						}
//						continue;
//					}
//				}
//				//回写-WMS读取完毕,状态置为3
//				if(succIds!=null&&succIds.size()>0){
//					int size = succIds.size();
//					int j = JavaTools.getSize(size, PAGE_NUMBER);
//					for(int k = 0 ; k<j ; k++){
//						int index = JavaTools.getIndex(k, size, PAGE_NUMBER);
//						List<Long> ids = JavaTools.getListLong(succIds, k, index, PAGE_NUMBER);
//						sql = "update "+MiddleTableName.MIDDLEQUALITYTESTING+" set flag = 3,wms_memo = 'WMS读取完毕',DEAL_TIME = systimestamp"
//								+ " where id in ("+StringUtils.substringBetween(ids.toString(), "[", "]")+")";
//						session.createSQLQuery(sql).executeUpdate();
//					}
//				}
//				//回写-无法匹配上质检单的数据,状态置为11-nullMoves
//				if(nullMoves!=null&&nullMoves.size()>0){
//					int size = nullMoves.size();
//					int j = JavaTools.getSize(size, PAGE_NUMBER);
//					for(int k = 0 ; k < j ; k++){
//						int index = JavaTools.getIndex(k, size, PAGE_NUMBER);
//						List<Long> ids = JavaTools.getListLong(nullMoves, k, index, PAGE_NUMBER);
//						sql = "update "+MiddleTableName.MIDDLEQUALITYTESTING+" set flag = 11,wms_memo = '无法匹配质检单号',DEAL_TIME = systimestamp"
//								+ " where id in ("+StringUtils.substringBetween(ids.toString(), "[", "]")+")";
//						session.createSQLQuery(sql).executeUpdate();
//					}
//					nullMoves.clear();
//				}
//				//回写-无法匹配发送方,状态置为12-nullSenders
//				if(nullSenders!=null&&nullSenders.size()>0){
//					List<String> ss = JavaTools.charList(nullSenders);
//					sql = "update "+MiddleTableName.MIDDLEQUALITYTESTING+" set flag = 12,wms_memo = '无法匹配发送方',DEAL_TIME = systimestamp"
//							+ " where SENDER in ("+StringUtils.substringBetween(ss.toString(), "[", "]")+")";
//					session.createSQLQuery(sql).executeUpdate();
//				}
//				//回写-WMS未维护货品状态信息,状态置为13-nullItemStatus
//				if(nullItemStatus!=null&&nullItemStatus.size()>0){
//					List<String> ss = JavaTools.charList(nullItemStatus);
//					sql = "update "+MiddleTableName.MIDDLEQUALITYTESTING+" set flag = 13,wms_memo = 'WMS未维护货品状态信息',DEAL_TIME = systimestamp"
//							+ " where SENDER in ("+StringUtils.substringBetween(ss.toString(), "[", "]")+")";
//					session.createSQLQuery(sql).executeUpdate();
//				}
//				//回写-质检状态映射表未维护发送方数据,状态置为14-nullmidStatus
//				if(nullmidStatus!=null&&nullmidStatus.size()>0){
//					List<String> ss = JavaTools.charList(nullmidStatus);
//					sql = "update "+MiddleTableName.MIDDLEQUALITYTESTING+" set flag = 14,wms_memo = '质检状态映射表未维护发送方数据',DEAL_TIME = systimestamp"
//							+ " where SENDER in ("+StringUtils.substringBetween(ss.toString(), "[", "]")+")";
//					session.createSQLQuery(sql).executeUpdate();
//				}
//				//回写-质检状态不能正确匹配WMS-15
//				if(errStatus!=null&&errStatus.size()>0){
//					int size = errStatus.size();
//					int j = JavaTools.getSize(size, PAGE_NUMBER);
//					for(int k = 0 ; k < j ; k++){
//						int index = JavaTools.getIndex(k, size, PAGE_NUMBER);
//						List<Long> ids = JavaTools.getListLong(errStatus, k, index, PAGE_NUMBER);
//						sql = "update "+MiddleTableName.MIDDLEQUALITYTESTING+" set flag = 15,wms_memo = '质检状态不能正确匹配WMS',DEAL_TIME = systimestamp"
//								+ " where id in ("+StringUtils.substringBetween(ids.toString(), "[", "]")+")";
//						session.createSQLQuery(sql).executeUpdate();
//					}
//				}
//				//回写-返回数量有误-16
//				if(errBackQty!=null&&errBackQty.size()>0){
//					int size = errBackQty.size();
//					int j = JavaTools.getSize(size, PAGE_NUMBER);
//					for(int k = 0 ; k < j ; k++){
//						int index = JavaTools.getIndex(k, size, PAGE_NUMBER);
//						List<Long> ids = JavaTools.getListLong(errBackQty, k, index, PAGE_NUMBER);
//						sql = "update "+MiddleTableName.MIDDLEQUALITYTESTING+" set flag = 16,wms_memo = '返回数量有误'"
//								+ " where id in ("+StringUtils.substringBetween(ids.toString(), "[", "]")+")";
//						session.createSQLQuery(sql).executeUpdate();
//					}
//				}
//			}
//		} catch (Exception e) {
//			e.printStackTrace();
//			throw new BusinessException(e.getLocalizedMessage());
//		}finally{
//			if(session!=null && session.isOpen()){
//				session.close();
//			}
//		}
//		logger.error("-----------结束QIS质检结果数据-----------");
	}
//	private Map<String,String[]> senderMap(){
//		List<Object[]> mces = commonDao.findByQuery("SELECT m.sender,m.warehouse.id,m.company.id"
//				+ " FROM MiddleCompanyExtends m WHERE 1=1");
//		if(mces==null || mces.size()<=0){
//			throw new BusinessException("仓库货主接口映射关系表未维护信息");
//		}
//		Map<String,String[]> senderMap = new HashMap<String, String[]>();//sender,[warehouse,company]
//		for(Object[] mce : mces){
//			senderMap.put(mce[0].toString(), new String[]{
//				mce[1].toString(),mce[2].toString()
//			});
//		}
//		mces.clear();
//		return senderMap;
//	}
	
//	private Map<String,List<Object[]>> senders(List<Object[]> objs,int[] a){
//		String key = null;
//		Map<String,List<Object[]>> senders = new HashMap<String, List<Object[]>>();
//		List<Object[]> tempObj = null;
//		for(Object[] o : objs){
//			key = "";
//			for (int i = 0; i < a.length; i++) {
//				key += o[a[i]]+MyUtils.spilt1;
//			}
//			key = StringUtils.substringBeforeLast(key,MyUtils.spilt1);
//			if(senders.containsKey(key)){
//				tempObj = senders.get(key);
//			}else{
//				tempObj = new ArrayList<Object[]>();
//			}
//			tempObj.add(o);
//			senders.put(key, tempObj);
//		}
//		return senders;
//	}
	
	public void insertMiddleTable(String moveDocCode,String asnCode,String supplierCode,
			String itemCode,String itemState,Double sendQty,String replenishmentArea,
			Double receivedQuantityBU,String itemName,String supplyName,String userName,
			String relateBill1,Double totalQty){
		Connection connection = getConnection();
		PreparedStatement pre = null;
		ResultSet rs = null;
		if(null == itemState || "null".equals(itemState) || "".equals(itemState)){
			itemState = "-";
		}
		Long maxId = getMaxId(pre, rs, connection, MiddleTableName.MIDDLEQUALITYTESTING);
		
		String insertSql = "insert into "+MiddleTableName.MIDDLEQUALITYTESTING+"(code,"
				+ "company,asn_Code,supplier_code,material_code,process_state,send_qty,"
				+ "MES_QUALITY_CODE,RECEIVED_QUANTITY_BU,SENDER,SUPPLY_NAME,ITEM_NAME,SJR,ID,"
				+ "SHDH,AVAILABLE_QTY) "
				+ "values(?,'106',?,?,?,?,?,?,?,'JQWLXG',?,?,?,?,?,?)";
		try {
			pre = connection.prepareStatement(insertSql);
			pre.setString(1,moveDocCode);//质检单号
			pre.setString(2, asnCode);//ASN单号
			pre.setString(3,supplierCode);//供应商编码
			pre.setString(4, itemCode);//货品编码
			pre.setString(5, itemState);//工艺状态
			pre.setDouble(6, sendQty);//送检数量
			pre.setString(7, replenishmentArea);//JAC质检唯一单号
			pre.setDouble(8, receivedQuantityBU);//加工数量
			pre.setString(9, itemName);//货品名称
			pre.setString(10, supplyName);//供应商名称
			pre.setString(11, userName);//送检人
			pre.setLong(12, maxId);//id
			pre.setString(13, relateBill1);//送货单号
			pre.setDouble(14, totalQty);//总数
			pre.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
			throw new BusinessException("处理失败："+e.getMessage());
		}finally{
			closeConnection(rs, pre, connection);
		}
	}
	/**
	 * 判断是否为空,返回字符串
	 * @param obj
	 * @return
	 */
	String getMayNullData(Object obj){
		String str = null;
		if(null != obj && !"".equals(obj)){
			str = obj.toString();
		}
		return str;
	}
}
