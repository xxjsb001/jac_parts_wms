package com.vtradex.wms.server.service.base.pojo;


import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;

import com.vtradex.thorn.server.exception.BusinessException;
import com.vtradex.thorn.server.service.pojo.DefaultBaseManager;
import com.vtradex.wms.server.model.organization.WmsOrganization;
import com.vtradex.wms.server.model.organization.WmsUserSupplier;
import com.vtradex.wms.server.model.organization.WmsUserSupplierHead;
import com.vtradex.wms.server.model.warehouse.WmsLocation;
import com.vtradex.wms.server.model.warehouse.WmsWorker;
import com.vtradex.wms.server.service.base.WmsOrganizationManager;
import com.vtradex.wms.server.service.rule.WmsRuleManager;
import com.vtradex.wms.server.utils.DateUtil;
import com.vtradex.wms.server.web.filter.WmsWarehouseHolder;

public class DefaultWmsOrganizationManager extends DefaultBaseManager implements WmsOrganizationManager {

	private WmsRuleManager wmsRuleManager;
	
	public DefaultWmsOrganizationManager(WmsRuleManager wmsRuleManager){
		this.wmsRuleManager = wmsRuleManager;
	}
	
	public void saveOrganization(WmsOrganization organization) {}
	public void fixLotRule(Object lotRule){
	}
	
	
	/**
	 * 根据货主统计货主盘点周期，下库位总数，已盘点数，作业中数，待盘点数 
	 * */
	public List<Double> countQuantity(Long wmsCompanyId) {
		WmsOrganization company = load(WmsOrganization.class,wmsCompanyId);
		List<Double> listCount = new ArrayList<Double>();
		
		//盘点周期
		Map problem = new HashMap();
		problem.put("类型", "获取盘点周期");
		problem.put("货主", company.getName());
		Map<String, Object> result = wmsRuleManager.execute(WmsWarehouseHolder.getWmsWarehouse().getName(), 
				WmsWarehouseHolder.getWmsWarehouse().getName(), "盘点规则", problem);
		Double cycleDate = Double.parseDouble(result.get("盘点周期").toString());
		
		//总库位数
		String hqlCount = "SELECT COUNT(wmsLocation.id) FROM WmsLocation wmsLocation WHERE wmsLocation.id IN " +
			" (SELECT wmsInventory.location.id FROM WmsInventory wmsInventory " +
			" WHERE location.type='STORAGE' " +
			" AND wmsInventory.itemKey.item.company.id=:companyId)";
		Long locationCount = (Long)commonDao.findByQueryUniqueResult(
				hqlCount, new String[]{"companyId"}, new Object[]{wmsCompanyId});
		
		//已盘点数
		String hqlFinished = "FROM WmsLocation wmsLocation WHERE wmsLocation.id IN " +
				" (SELECT wmsInventory.location.id FROM WmsInventory wmsInventory " +
				" WHERE wmsInventory.location.type='STORAGE' " +
				" AND wmsInventory.itemKey.item.company.id=:companyId) " +
				" AND wmsLocation.cycleDate IS NOT NULL";
		Long finished = 0l;
		List<WmsLocation> listLoc = commonDao.findByQuery(hqlFinished, new String[]{"companyId"}, new Object[]{wmsCompanyId});
		
		if(!listLoc.isEmpty()) {
			for(WmsLocation wmsLocation : listLoc){
				if(DateUtil.getMargin((new Date()).toString(),wmsLocation.getCycleDate().toString())<30){
					finished++;
				}
			}
		}
		
		//作业中数
		String hqlProcessing = "SELECT COUNT(wmsLocation.id) FROM WmsLocation wmsLocation " +
			" WHERE wmsLocation.warehouse.id = :warehouseId " +
			" AND (wmsLocation.id IN (SELECT wmsInventory.location.id FROM WmsInventory wmsInventory " +
			"     WHERE wmsInventory.location.warehouse.id = :warehouseId " +
			"         AND wmsInventory.location.type='STORAGE' " +
			"         AND (wmsInventory.putawayQuantityBU<>0 OR wmsInventory.allocatedQuantityBU<>0) " +
			"         AND wmsInventory.itemKey.item.company.id=:companyId) " +
			"     OR wmsLocation.lockCount=true)";
		Long processing = (Long)commonDao.findByQueryUniqueResult(hqlProcessing,
				new String[]{"warehouseId", "companyId"}, 
				new Object[]{WmsWarehouseHolder.getWmsWarehouse().getId(), wmsCompanyId});
		
		listCount.add(cycleDate);
		listCount.add(Double.valueOf(locationCount.toString()));
		listCount.add(Double.valueOf(finished.toString()));
		listCount.add(Double.valueOf(processing.toString()));
		
		return listCount;
	}

	public void addWorkUser(Long workerGroupId, Long workId, String station) {
		WmsWorker workerGroup = commonDao.load(WmsWorker.class, workerGroupId);
		WmsWorker worker = commonDao.load(WmsWorker.class, workId);
		worker.setStation(station);
		worker.setWorker(workerGroup);
		commonDao.store(worker);
	}
	
	public void removeWorkUser(WmsWorker worker) {
		worker.setStation(null);
		worker.setWorker(null);
		commonDao.store(worker);
	}
	
	public void importAdditionalInfo(Map<String,String> map){
		String code = map.get("代码");
		String name = map.get("名称");
		String telephone=map.get("联系电话");
		String address = map.get("联系地址");
		String taxCode = map.get("税号");
		String bankAccountNum = map.get("开户行及账号");
		if(StringUtils.isEmpty(code) &&  StringUtils.isEmpty(name)){
			throw new BusinessException("代码、名称不能同时为空");
		}
		String hql ;
		WmsOrganization supplier;
		if(StringUtils.isEmpty(code)){
			hql="from WmsOrganization org where org.name=:name and org.status='ENABLED'";
			supplier= (WmsOrganization)this.commonDao.findByQueryUniqueResult(hql, "name", name);
		}else{
			hql="from WmsOrganization org where org.code=:code and org.status='ENABLED'";
			supplier= (WmsOrganization)this.commonDao.findByQueryUniqueResult(hql, "code", code);
		}
		if(null == supplier){
			throw new BusinessException("找不多对应生效供应商，请检查代码或者名称是否完全匹配");
		}
		if(StringUtils.isEmpty(address)){
			supplier.getContact().setAddress(address);
		}
		if(StringUtils.isEmpty(telephone)){
			supplier.getContact().setTelephone(telephone);
		}
		if(StringUtils.isEmpty(taxCode)){
			supplier.getContact().setTaxCode(taxCode);
		}
		if(StringUtils.isEmpty(bankAccountNum)){
			supplier.getContact().setBankAccountNum(bankAccountNum);
		}
		this.commonDao.store(supplier);
	}
	
	public void addUserSupplier(Long usdId,WmsUserSupplier us){
		WmsUserSupplierHead usd = commonDao.load(WmsUserSupplierHead.class, usdId);
		us.setUserHead(usd);
		commonDao.store(us);
	}
	public void removeUserSupplier(WmsUserSupplier us){
		commonDao.delete(us);
	}
	public void removeUserSupplierHead(WmsUserSupplierHead usd){
		List<WmsUserSupplier> uss = commonDao.findByQuery("FROM WmsUserSupplier us WHERE us.userHead.id =:userHead", "userHead",usd.getId());
		if(uss!=null && uss.size()>0){
			commonDao.deleteAll(uss);
		}
		commonDao.delete(usd);
	}
}
