返回列表 = 创建列表()
上架策略对象=查表("R101_上架_上架规则表",供应商编码,单据类型编码,存储类型)
如果(上架策略对象 == 空){
	异常("[" + 拼接字符串(供应商编码,单据类型编码,存储类型) +"]" + "查找" + "R101_上架_上架规则表," + "未找到数据!")
}
库位列表 = 创建列表()
数据源 = "R101_JAC_库位_oracle"
是否过滤库存 = "是"//正常ASN要将已经上架过的库位过滤,库位类型无限大小的不过滤,默认上一个库位
如果(上架策略对象 != 空){
	$库位定位分类值="(" + 上架策略对象.库位定位分类  + ")"
	$库位定位分类集合=分解列表($库位定位分类值)
	每个($临时库位定位分类 : $库位定位分类集合){
		库位定位分类集 = 多值查表("R101_基础数据_库位定位分类表",$临时库位定位分类)
		如果(库位定位分类集 == 空){
			异常("[" + 上架策略对象.库位定位分类 +"]" + "查找" + "R101_基础数据_库位定位分类表," + "未找到数据!")
		}
		每个($库位定位分类 : 库位定位分类集){
			库位定位分类 = $库位定位分类
			如果(仓库代码=="JAC_FDJ"){//扩展使用
				数据源 = "R101_JAC_库位_oracle"
				如果(库位定位分类.库位承载类型 != 空 && 库位定位分类.库位承载类型=="无限大小库位"){
					数据源 = "R101_JAC收货库位数据源"
					是否过滤库存 = "否"
				}
			}
			打印("库位定位分类:"+库位定位分类+","+仓库代码+","+库位定位分类.库位承载类型)
			上架策略库位列表 = 创建列表()
			上架策略库位列表 = 获取上架策略库位列表($库位定位分类,数据源).上架策略库位列表返回值
			打印("上架策略库位列表:"+上架策略库位列表)
			如果(上架策略库位列表 == 空){
				异常("[" + 上架策略对象.库位定位分类 +"]" + "查找数据源:" + 数据源 + ",未找到可用库位!")
			}
		}
	}
}

获取上架策略库位列表(库位定位分类,数据源){
	$上架策略库位列表 = 创建列表()
	$区区间集 = 分解列表(库位定位分类.区区间)
	$区区间对象 = 赋值($区区间集,"开始值","结束值")	

	$排区间集 = 分解列表(库位定位分类.排区间)
	$排区间对象 = 赋值($排区间集,"开始值","结束值")	

	$列区间集 = 分解列表(库位定位分类.列区间)
	$列区间对象 = 赋值($列区间集,"开始值","结束值")	

	$层区间集 = 分解列表(库位定位分类.层区间)
	$层区间对象 = 赋值($层区间集,"开始值","结束值")
	
	打印("获取上架策略库位列表:"+$区区间对象+","+$排区间对象+","+$层区间对象+","+$列区间对象+","+仓库ID+","+库位定位分类.库区+","+托盘个数+","+数据源)

	$库位结果集 = 创建对象()
	$库位结果集 = 数据查询(数据源,"仓库ID",仓库ID,"库区",库位定位分类.库区,
	"区区间开始值",$区区间对象.开始值,"区区间结束值",$区区间对象.结束值,
	"排区间开始值",$排区间对象.开始值,"排区间结束值",$排区间对象.结束值,
	"列区间开始值",$列区间对象.开始值,"列区间结束值",$列区间对象.结束值,
	"层区间开始值",$层区间对象.开始值,"层区间结束值",$层区间对象.结束值,"托盘个数",托盘个数)
	
	如果($库位结果集 == 空){
	 	异常("未找到符合条件的库位!")
	}
	每个($库位:$库位结果集.库位){
	 	加入列表($上架策略库位列表, $库位)
	}
	上架策略库位列表返回值 = $上架策略库位列表
}