package com.vtradex.wms.server.telnet.shell.pick;

import java.io.IOException;

import org.apache.commons.lang.StringUtils;

import net.wimpi.telnetd.net.Connection;

import com.vtradex.kangaroo.shell.BreakException;
import com.vtradex.kangaroo.shell.ContinueException;
import com.vtradex.kangaroo.shell.ShellFactory;
import com.vtradex.kangaroo.shell.Thorn4BaseShell;
import com.vtradex.wms.server.model.inventory.WmsInventory;
import com.vtradex.wms.server.telnet.dto.WmsPickContainerDTO;
import com.vtradex.wms.server.telnet.pick.WmsPickRFManager;
import com.vtradex.wms.server.web.filter.WmsWorkerHolder;

public class WmsPickContainerShell extends Thorn4BaseShell{
	
	public static final String PAGE_ID = "wmsPickContainerShell";
	
	private final WmsPickRFManager pickRFManager;
	
	public WmsPickContainerShell(WmsPickRFManager pickRFManager) {
		this.pickRFManager = pickRFManager;
	}
	@Override
	protected void mainProcess(Connection connection) throws BreakException,
			ContinueException, IOException, Exception {
		
		WmsPickContainerDTO dto = (WmsPickContainerDTO) this.getParentContext().get("CURRENT_DTO");
		if(dto == null){
			dto = pickRFManager.findPickContainer(WmsWorkerHolder.getWmsWorker());
		}
		if(dto == null){
			this.forward(ShellFactory.getMainShell(),WmsWorkerHolder.getWmsWorker().getName()+"没有器具需要拣货");
		}
		this.output("器具型号", dto.getType());
		if(dto.getContainer() == null || "-".equals(dto.getContainer())){
			String container = this.getTextField("器具编码");
			if(StringUtils.isEmpty(container)){
				this.setStatusMessage("器具编码不能为空");
			}
			String mes = pickRFManager.checkContainerByBoxType(container, dto.getType());
			if(!"".equals(mes)){
				this.remove("器具编码");
				this.setStatusMessage(mes);
			}
			dto.setContainer(container);
		}
		this.output("物料编码", dto.getItemCode());
		this.output("物料名称", dto.getItemName());
		this.output("供应商编码", dto.getSupplier());
		this.output("推荐库位", dto.getLocationCode());
		String locCode = this.getTextField("拣选库位");
		if(StringUtils.isEmpty(locCode)){
			this.setStatusMessage("拣选库位不能为空");
		}
		dto.setPickLocCode(locCode);
		if(!dto.getLocationCode().equals(locCode)){
			String isChanged = this.getTextField("库位与推荐的不一致是否更改:是-1/否-0");
			if("1".equals(isChanged)){
				WmsInventory inv =pickRFManager.getInventoryQtyByLocation(dto.getPickLocCode(),dto.getItemCode(),dto.getSupplier());
				if(inv == null){
					this.context.put("CURRENT_DTO", dto);
					this.forward(WmsPickContainerShell.PAGE_ID,"库位未找到库存，请重新输入");
				}
				if(inv.getAvailableQuantityBU() < dto.getUnMoveQuantityBU()){
					dto.setUnMoveQuantityBU(inv.getAvailableQuantityBU());
				}
				dto.setInventoryId(inv.getId());
				this.context.put("CURRENT_DTO", dto);
				this.forward(WmsPickContainerShell2.PAGE_ID);
			}else{
				this.context.put("CURRENT_DTO", dto);
				this.forward(WmsPickContainerShell.PAGE_ID);
			}
			
		}else{
			this.context.put("CURRENT_DTO", dto);
			this.forward(WmsPickContainerShell2.PAGE_ID);
		}
	}

}
