package com.vtradex.wms.server.telnet.pick.pojo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import org.springframework.jdbc.core.JdbcTemplate;

import com.vtradex.thorn.server.exception.BusinessException;
import com.vtradex.thorn.server.model.EntityFactory;
import com.vtradex.thorn.server.service.WorkflowManager;
import com.vtradex.thorn.server.util.BeanUtils;
import com.vtradex.wms.server.model.base.BaseStatus;
import com.vtradex.wms.server.model.base.ShipLotInfo;
import com.vtradex.wms.server.model.base.WmsLogTitle;
import com.vtradex.wms.server.model.base.WmsLogType;
import com.vtradex.wms.server.model.inventory.WmsInventory;
import com.vtradex.wms.server.model.inventory.WmsInventoryLogType;
import com.vtradex.wms.server.model.inventory.WmsItemKey;
import com.vtradex.wms.server.model.move.WmsMoveDoc;
import com.vtradex.wms.server.model.move.WmsMoveDocDetail;
import com.vtradex.wms.server.model.move.WmsMoveDocShipStatus;
import com.vtradex.wms.server.model.move.WmsMoveDocStatus;
import com.vtradex.wms.server.model.move.WmsTask;
import com.vtradex.wms.server.model.move.WmsTaskStatus;
import com.vtradex.wms.server.model.move.WmsWorkDoc;
import com.vtradex.wms.server.model.organization.WmsBillType;
import com.vtradex.wms.server.model.organization.WmsItem;
import com.vtradex.wms.server.model.organization.WmsOrganization;
import com.vtradex.wms.server.model.organization.WmsPackageUnit;
import com.vtradex.wms.server.model.shipping.WmsBOL;
import com.vtradex.wms.server.model.shipping.WmsBOLDetail;
import com.vtradex.wms.server.model.shipping.WmsBolDetailExtend;
import com.vtradex.wms.server.model.shipping.WmsMoveDocAndStation;
import com.vtradex.wms.server.model.shipping.WmsPickTicket;
import com.vtradex.wms.server.model.shipping.WmsPickTicketDetail;
import com.vtradex.wms.server.model.shipping.WmsTaskAndStation;
import com.vtradex.wms.server.model.warehouse.WmsBoxType;
import com.vtradex.wms.server.model.warehouse.WmsLocation;
import com.vtradex.wms.server.model.warehouse.WmsLocationType;
import com.vtradex.wms.server.model.warehouse.WmsWarehouse;
import com.vtradex.wms.server.model.warehouse.WmsWorker;
import com.vtradex.wms.server.service.inventory.WmsInventoryManager;
import com.vtradex.wms.server.service.rule.WmsRuleManager;
import com.vtradex.wms.server.service.sequence.WmsBussinessCodeManager;
import com.vtradex.wms.server.service.task.WmsTaskManager;
import com.vtradex.wms.server.service.workDoc.WmsWorkDocManager;
import com.vtradex.wms.server.telnet.dto.WmsBOLDTO;
import com.vtradex.wms.server.telnet.dto.WmsPickContainerDTO;
import com.vtradex.wms.server.telnet.dto.WmsPickTaskDTO;
import com.vtradex.wms.server.telnet.manager.pojo.DefaultLimitQueryBaseManager;
import com.vtradex.wms.server.telnet.pick.WmsPickRFManager;
import com.vtradex.wms.server.telnet.shell.ShellExceptions;
import com.vtradex.wms.server.telnet.shell.pick.WmsBOLShell;
import com.vtradex.wms.server.telnet.shell.pick.WmsPickBackMoveDocShell;
import com.vtradex.wms.server.model.carrier.WmsVehicle;
import com.vtradex.wms.server.utils.LotInfoUtil;
import com.vtradex.wms.server.utils.MyUtils;
import com.vtradex.wms.server.utils.PackageUtils;
import com.vtradex.wms.server.utils.StringHelper;
import com.vtradex.wms.server.utils.WmsTables;
import com.vtradex.wms.server.web.filter.WmsWarehouseHolder;
import com.vtradex.wms.server.web.filter.WmsWorkerHolder;

public class DefaultWmsPickRFManager extends DefaultLimitQueryBaseManager
		implements WmsPickRFManager {
	
	private final WmsWorkDocManager workDocManager;
	private final WorkflowManager workflowManager;
	private final WmsRuleManager wmsRuleManager;
	private final WmsInventoryManager wmsInventoryManager;
	private WmsBussinessCodeManager codeManager;
	
	private JdbcTemplate jdbcTemplate;
	public JdbcTemplate getJdbcTemplate() {
		return jdbcTemplate;
	}
	public void setJdbcTemplate(JdbcTemplate jdbcTemplate) {
		this.jdbcTemplate = jdbcTemplate;
	}
	public DefaultWmsPickRFManager(WmsWorkDocManager workDocManager , WorkflowManager workflowManager, 
			WmsRuleManager wmsRuleManager,WmsInventoryManager wmsInventoryManager,WmsBussinessCodeManager codeManager) {
		this.workDocManager = workDocManager;
		this.workflowManager = workflowManager;
		this.wmsRuleManager = wmsRuleManager;
		this.wmsInventoryManager = wmsInventoryManager;
		this.codeManager = codeManager;
	}

	public WmsPickTaskDTO findPickTaskById(Long workDocId) {
		WmsWorkDoc workDoc = commonDao.load(WmsWorkDoc.class, workDocId);
		workDoc.setWorker(WmsWorkerHolder.getWmsWorker());
		commonDao.store(workDoc);
		String hql = "SELECT new com.vtradex.wms.server.telnet.dto.WmsPickTaskDTO(task.moveDocDetail.moveDoc.id,task.moveDocDetail.moveDoc.code," +
			"task.workDoc.id,task.workDoc.code,task.id,task.fromLocationId,task.fromLocationCode,task.toLocationId," +
			"task.toLocationCode,task.itemKey.item.code,task.itemKey.item.name,task.itemKey.item.barCode,task.planQuantityBU-task.movedQuantityBU)" +
			" FROM WmsTask task , WmsLocation loc" +
			" WHERE task.fromLocationId = loc.id AND task.workDoc.id=:workDocId" +
			" AND task.status in (:statuss)" +
			" ORDER BY loc.routeNo ASC , task.itemKey.item.code ASC";
		return (WmsPickTaskDTO)this.findByHqlLimitQuery(hql, new String[]{"workDocId" , "statuss"}, new Object[]{workDocId , Arrays.asList(new String[]{WmsTaskStatus.DISPATCHED ,WmsTaskStatus.WORKING})}, 1);
	}

	public Long checkWorkDocCode(String workDocCode) {
		WmsWorkDoc workDoc = this.findWorkDocByCode(workDocCode);
		if(workDoc == null) {
			throw new BusinessException("不存在该作业单");
		}
//		if(!workDoc.getWorkArea().getId().equals(WmsWorkAreaHolder.getWmsWorkArea().getId())) {
//			throw new BusinessException("作业单不属于当前作业区");
//		}
		if(workDoc.getWorker() != null && !workDoc.getWorker().getId().equals(WmsWorkerHolder.getWmsWorker().getId())) {
			throw new BusinessException("作业单已被其他作业人员申请");
		}
		return workDoc.getId();
	}

	private WmsWorkDoc findWorkDocByCode(String code){
		return (WmsWorkDoc)commonDao.findByQueryUniqueResult("FROM WmsWorkDoc wd WHERE wd.code=:code AND wd.warehouse.id=:wId"
				, new String[]{"code","wId"}, new Object[]{code , WmsWarehouseHolder.getWmsWarehouse().getId()});
	}

	public void confirmPick(WmsPickTaskDTO pickTaskDTO, String locationCode,
			Double quantity) {
		WmsLocation srcLocation = queryWmsLocationByCode(locationCode);
		WmsTask task = commonDao.load(WmsTask.class, pickTaskDTO.getTaskId());
		workDocManager.singleWorkConfirm(task, pickTaskDTO.getToLocationId(), srcLocation.getId(), quantity, WmsWorkerHolder.getWmsWorker().getId());
		workflowManager.doWorkflow(task, "taskProcess.confirm");
	}
	
	public void markExceptionWmsLocation(Long locationId) throws BusinessException {
		try {
			WmsLocation loc = commonDao.load(WmsLocation.class, locationId);
			loc.setExceptionFlag(Boolean.TRUE);
		} catch (BusinessException be) {
			throw new BusinessException("标识异常库位失败，请重试");
		}
	}

	public void resetAllocate(WmsPickTaskDTO pickTaskDTO) {
		
		WmsMoveDoc moveDoc = commonDao.load(WmsMoveDoc.class, pickTaskDTO.getMoveDocId());
		WmsTask task = commonDao.load(WmsTask.class, pickTaskDTO.getTaskId());
		WmsMoveDocDetail moveDocDetail = commonDao.load(WmsMoveDocDetail.class, task.getMoveDocDetail().getId());
		
		WmsPickTicket pickTicket = commonDao.load(WmsPickTicket.class, moveDoc.getPickTicket().getId());
		WmsBillType billType = commonDao.load(WmsBillType.class, pickTicket.getBillType().getId());
		String billTypeName = billType.getName();
		
		WmsOrganization company = commonDao.load(WmsOrganization.class, moveDoc.getCompany().getId());
		WmsWarehouse warehouse = commonDao.load(WmsWarehouse.class, moveDoc.getWarehouse().getId());				
		String companyName = company.getName();
		if(company.isBeVirtual()){
			companyName = warehouse.getName();
		}
		String warehouseName = warehouse.getName();
		Long warehouseId = warehouse.getId();
		
		Map<String, Object> problem = new HashMap<String, Object>();
		problem.put("仓库ID", warehouseId);
		problem.put("货主", companyName);
		problem.put("单据类型", billTypeName);
		problem.put("货主", companyName);
		WmsItem item = commonDao.load(WmsItem.class, task.getItemKey().getItem().getId());
		WmsPackageUnit packageUnit = commonDao.load(WmsPackageUnit.class, task.getPackageUnit().getId());
		problem.put("拣货分类", item.getClass2());
		problem.put("包装级别", packageUnit.getLevel());
		problem.put("源拣货库位序号", task.getFromLocationId());
		problem.put("货品ID", item.getId());
		problem.put("货品编码", item.getCode());
		problem.put("待拣选数量", task.getUnmovedQuantityBU());
		problem.put("库存状态", task.getInventoryStatus());
		problem.put("数量", task.getUnmovedQuantityBU());
		if (pickTicket.getCustomer() != null) {
			WmsOrganization customer = commonDao.load(WmsOrganization.class, pickTicket.getCustomer().getId());
			problem.put("收货人", pickTicket.getCustomer() == null ? "" : customer.getName());
		} else {
			problem.put("收货人", "");
		}
		
		ShipLotInfo shipLotInfo = moveDocDetail.getShipLotInfo();
		if (shipLotInfo == null) {
			shipLotInfo = new ShipLotInfo();
		}
		LotInfoUtil.generateShipLotInfo(problem, shipLotInfo, Boolean.TRUE);
		
		Map<String, Object> result = wmsRuleManager.execute(warehouseName, companyName, "拣货分配规则", problem);
		
		//作业任务取消分配
		Double unallocateQty = task.getUnmovedQuantityBU();
		WmsInventory fromInv = commonDao.load(WmsInventory.class,
				task.getSrcInventoryId());
		fromInv.unallocatePickup(unallocateQty);
		WmsPickTicketDetail pickTicketDetail = load(
				WmsPickTicketDetail.class, moveDocDetail.getRelatedId());
		if (pickTicketDetail != null) {
			pickTicketDetail.unallocate(unallocateQty);
		}
		
		task.unallocatePick(unallocateQty);
		if(task.getStatus().equals(WmsTaskStatus.WORKING) && task.getMovedQuantityBU()>0) {
			workflowManager.doWorkflow(task, "taskProcess.confirm");
		}
		
		double tempQuantity = 0D;
		//作业任务重新分配
		int size = ((List<Map<String, Object>>) result.get("返回列表")).size();
		for (int i = 0; i < size; i++) {
			Map<String, Object> wmsTaskInfos = ((List<Map<String, Object>>) result.get("返回列表")).get(i);
			double quantity = Double.valueOf(wmsTaskInfos.get(
					"分配数量").toString());
			if (quantity == 0) {
				continue;
			}
			Long srcInventoryId = Long.valueOf(wmsTaskInfos.get("库存ID").toString());
			WmsInventory srcInv = commonDao.load(WmsInventory.class,srcInventoryId);
			
			if (moveDocDetail.getPlanQuantityBU() > tempQuantity) {
				if (i == 0 && task.getMovedQuantityBU() == 0) {
					pickupAllocate(task, srcInv,quantity,moveDocDetail,false);
				} else {
					pickupAllocate(task, srcInv,quantity,moveDocDetail,true);
				}
				pickTicketDetail.allocate(quantity);
				commonDao.store(pickTicketDetail);

				tempQuantity+=quantity;
			} else {
				break;
			}
		}
	}
	
	private void pickupAllocate(WmsTask task, WmsInventory srcInv, double quantityBU, 
			WmsMoveDocDetail detail, boolean isNew) {
		
		srcInv.allocatePickup(quantityBU);
		commonDao.store(srcInv);
		
		detail.setInventoryId(srcInv.getId());
		detail.setFromLocationId(srcInv.getLocation().getId());
		detail.setFromLocationCode(srcInv.getLocation().getCode());
		detail.allocate(quantityBU);
		commonDao.store(detail);
		
		if(isNew) {
			WmsTask newTask = EntityFactory.getEntity(WmsTask.class);
			BeanUtils.copyEntity(newTask, task);
			newTask.setId(null);
			newTask.setPlanQuantityBU(quantityBU);
			newTask.setPlanQuantity(PackageUtils.convertPackQuantity(quantityBU,task.getPackageUnit()));
			newTask.setMovedQuantityBU(0D);
			newTask.setStatus(WmsTaskStatus.DISPATCHED);
			newTask.setFromLocationId(srcInv.getLocation().getId());
			newTask.setFromLocationCode(srcInv.getLocation().getCode());
			newTask.setSrcInventoryId(srcInv.getId());
			detail.getTasks().add(newTask);
			newTask.getWorkDoc().addTask(newTask);
			commonDao.store(newTask);
		} else {
			task.addPlanQuantityBU(quantityBU);
			task.setFromLocationId(srcInv.getLocation().getId());
			task.setFromLocationCode(srcInv.getLocation().getCode());
			task.setSrcInventoryId(srcInv.getId());
			task.getWorkDoc().addTask(task);
			commonDao.store(task);
		}
		
	}
	public String pickConfirmAll(String pickNo){
		WmsPickTicket pic = checkPicIsNull(pickNo);
		if(pic==null){
			return "pic is null";
		}
		List<WmsMoveDoc> mm = checkMoveIsNull(pic.getId());//,WmsMoveDocStatus.ACTIVE,WmsMoveDocStatus.WORKING
		if(mm==null){
			return "move is null";
		}
		Boolean anyExits = true;
		for(WmsMoveDoc m : mm){
			if(m.getStatus().equals(WmsMoveDocStatus.ACTIVE) 
					|| m.getStatus().equals(WmsMoveDocStatus.WORKING)){
				workDocManager.pickConfirmAll(m);
				workflowManager.doWorkflow(m, "wmsMoveDocProcess.confirm");
				anyExits = false;
			}
		}
		if(anyExits){
			String mesg = "未知的拣货单状态错误";
			for(WmsMoveDoc m : mm){
				if(m.getStatus().equals(WmsMoveDocStatus.OPEN) 
						|| m.getStatus().equals(WmsMoveDocStatus.PARTALLOCATED)){
					mesg = "失败!拣货单未整单分配";
				}else if(m.getStatus().equals(WmsMoveDocStatus.ALLOCATED)){
					mesg = "失败!拣货单未生效";
				}else if(m.getStatus().equals(WmsMoveDocStatus.FINISHED)){
					mesg = "失败!已拣货扫码,重复扫码";
				}else if(m.getStatus().equals(WmsMoveDocStatus.CANCELED)){
					mesg = "失败!拣货单已取消";
				}
				return mesg;
			}
		}
		return MyUtils.SUCCESS;
	}
	private WmsPickTicket checkPicIsNull(String pickNo){
		WmsPickTicket pic = (WmsPickTicket) commonDao.findByQueryUniqueResult("FROM WmsPickTicket p"
				+ " WHERE (p.code =:code OR p.relatedBill1 =:code) ", 
				new String[]{"code"}, new Object[]{pickNo});
		if(pic==null){
			return null;//"pic is null";
		}
		return pic;
	}
	@SuppressWarnings("unchecked")
	private List<WmsMoveDoc> checkMoveIsNull(Long pickTicketId){//,String status1,String status2
		List<WmsMoveDoc> mm = commonDao.findByQuery("FROM WmsMoveDoc m"
				 +" WHERE m.pickTicket.id =:pickTicketId",
//				 +" AND (m.status =:status1 OR m.status =:status2)", 
				new String[]{"pickTicketId"},//,"status1","status2"
				new Object[]{pickTicketId});//,status1,status2
		if(mm==null || mm.size()<=0){
			return null;
		}
		return mm;
	}
	public String shipRecord(String pickNo,String vehicleNo){
		WmsPickTicket pic = checkPicIsNull(pickNo);
		if(pic==null){
			return "pic is null";
		}
		List<WmsMoveDoc> mm = checkMoveIsNull(pic.getId());//,WmsMoveDocStatus.FINISHED,WmsMoveDocStatus.WORKING
		if(mm==null){
			return "move is null";
		}
		for(WmsMoveDoc m : mm){
			if(!m.getShipStatus().equals(WmsMoveDocShipStatus.UNSHIP)
					&& !m.getStatus().equals(WmsMoveDocStatus.FINISHED)
					&& !m.getStatus().equals(WmsMoveDocStatus.WORKING)){
//				return "move is ship";
				continue;
			}
			m.setVehicleNo(vehicleNo);
			commonDao.store(m);
			workDocManager.shipRecord(m);
		}
		return pickNo;
		
	}
	
	public WmsPickContainerDTO findPickContainer(WmsWorker blg){
		String taskHql = " FROM WmsTask task WHERE task.status !=:status AND task.moveDocDetail.id =:moveDocDetailId AND task.planQuantityBU > 0 ";
		String hql = " FROM WmsMoveDocAndStation mds WHERE mds.isFinished =:isFinished AND mds.moveDocDetail.moveDoc.blg.id =:blgId" +
				" AND mds.quantity > mds.pickQuantity AND mds.moveDocDetail.moveDoc.status IN(:status)" +
				" ORDER BY mds.id ASC ";
		WmsMoveDocAndStation mds = (WmsMoveDocAndStation) this.findByHqlLimitQuery(hql, new String[]{"isFinished","blgId","status"}, 
				new Object[]{Boolean.FALSE,blg.getId(),Arrays.asList(WmsMoveDocStatus.ACTIVE,WmsMoveDocStatus.WORKING)},1);
		if(mds == null){
			return null;
		}
		WmsTask task = (WmsTask) this.findByHqlLimitQuery(taskHql, 
				new String[]{"status","moveDocDetailId"}, 
				new Object[]{WmsTaskStatus.FINISHED,mds.getMoveDocDetail().getId()}, 1);
		if(task==null){
			throw new BusinessException(mds.getMoveDocDetail().getMoveDoc().getCode()+"无拣货任务!");
		}
		WmsPickContainerDTO dto = new WmsPickContainerDTO();
		dto.setTaskId(task.getId());
		dto.setMoveDocAndStationId(mds.getId());
		dto.setItemId(mds.getItem().getId());
		dto.setItemCode(mds.getItem().getCode());
		dto.setItemName(mds.getItem().getName());
		dto.setType(mds.getType());
		dto.setLocationCode(task.getFromLocationCode());
		dto.setSupplier(mds.getMoveDocDetail().getShipLotInfo().getSupplier());
		if(task.getUnmovedQuantityBU() >= mds.getQuantity()-mds.getPickQuantity()){
			dto.setPlanQuantityBU(mds.getQuantity()-mds.getPickQuantity());
			dto.setUnMoveQuantityBU(mds.getQuantity()-mds.getPickQuantity());
		}else{
			dto.setPlanQuantityBU(task.getUnmovedQuantityBU());
			dto.setUnMoveQuantityBU(task.getUnmovedQuantityBU());
		}
		return dto;
	}
	
	public void confimPickByContainer(WmsPickContainerDTO dto,Boolean isFinished){
		WmsTask task = commonDao.load(WmsTask.class, dto.getTaskId());
		WmsMoveDoc moveDoc = commonDao.load(WmsMoveDoc.class, task.getMoveDocDetail().getMoveDoc().getId());
		WmsWorker worker = WmsWorkerHolder.getWmsWorker();
		String hql = " FROM WmsTaskAndStation wts WHERE wts.station.id =:stationId AND wts.isConfirm =:isConfirm ORDER BY wts.id ASC";
		List<WmsTaskAndStation> stations = commonDao.findByQuery(hql, new String[]{"stationId","isConfirm"}, new Object[]{dto.getMoveDocAndStationId(),Boolean.FALSE});
		Double qty = 0D;
		for(WmsTaskAndStation wts : stations){
			workDocManager.singleConfirm(wts.getTask(), moveDoc.getId(), wts.getPickQuantityBu(), wts.getInventoryId(), worker.getId());
			qty += wts.getPickQuantityBu();
			wts.setIsConfirm(Boolean.TRUE);
			commonDao.store(wts);
		}
//		workDocManager.singleConfirm(task, moveDoc.getId(), dto.getPickQuantity(), null, worker.getId());
		WmsMoveDocAndStation mds = commonDao.load(WmsMoveDocAndStation.class, dto.getMoveDocAndStationId());
		mds.setContainer(dto.getContainer());
		mds.setPickQuantity(mds.getPickQuantity()+qty);
		if(mds.getQuantity() - mds.getPickQuantity() == 0D){
			mds.setIsFinished(Boolean.TRUE);
		}
		if(isFinished){
			mds.setIsFinished(Boolean.TRUE);
		}
		commonDao.store(mds);
		if(task.getUnmovedQuantityBU() > 0){//库存短缺  原库位取消拣货分配占用量并标记异常库位
			// 原库位取消拣货分配
			WmsInventory srcInv = commonDao.load(WmsInventory.class, task.getSrcInventoryId());
			/*srcInv.unallocatePickup(task.getUnmovedQuantityBU());
			//目标库位取消上架分配
			WmsInventory discInv =commonDao.load(WmsInventory.class, task.getDescInventoryId());
			discInv.unallocatePutaway(task.getUnmovedQuantityBU());*/
			//标记异常库位记录库存日志--库位异常暂不标记
//			WmsLocation loc = commonDao.load(WmsLocation.class, task.getFromLocationId());
//			loc.setExceptionFlag(Boolean.TRUE);
//			commonDao.store(loc);
			wmsInventoryManager.addInventoryLog(WmsInventoryLogType.INVENTORY_EXCEPTION, 0, 
					moveDoc.getCode(), moveDoc.getBillType(), srcInv.getLocation(), srcInv.getItemKey(), 0D,   
					srcInv.getPackageUnit(),srcInv.getStatus(),"拣货异常");
		}
	}
	
	public WmsInventory getInventoryQtyByLocation(String location,String itemCode,String supplier){
		String hql = "FROM WmsInventory inv WHERE inv.location.code =:locationCode AND inv.itemKey.item.code =:itemCode AND inv.itemKey.lotInfo.supplier.code =:supplier AND inv.quantityBU -inv.allocatedQuantityBU >0 ";
		WmsInventory inv = (WmsInventory) this.findByHqlLimitQuery(hql, new String[]{"locationCode","itemCode","supplier"}, new Object[]{location,itemCode,supplier}, 1);
		return inv;
	}
	
	public Boolean checkIsFinished(WmsPickContainerDTO dto){//开始用来判断载具是否拣选完成，已改不做判断了--jianxiang.hang--170706
		WmsTask task = commonDao.load(WmsTask.class, dto.getTaskId());
		WmsMoveDocAndStation mds = commonDao.load(WmsMoveDocAndStation.class, dto.getMoveDocAndStationId());
//		String hql = " FROM WmsTaskAndStation wts WHERE wts.station.id =:stationId AND wts.container IS NOT NULL ";
//		List<WmsTaskAndStation> wtss = commonDao.findByQuery(hql, new String[]{"stationId"}, new Object[]{mds.getId()});
		
		WmsTaskAndStation wts = EntityFactory.getEntity(WmsTaskAndStation.class);
		wts.setTask(task);
		wts.setStation(mds);
		wts.setInventoryId(dto.getInventoryId());
		wts.setPickQuantityBu(dto.getPickQuantity());
		wts.setContainer(dto.getContainer());
		commonDao.store(wts);
		String hql = " SELECT SUM(wts.pickQuantityBu) FROM WmsTaskAndStation wts WHERE wts.station.id =:stationId AND wts.isConfirm =:isConfirm ";
		Double qty = (Double) commonDao.findByQueryUniqueResult(hql, new String[]{"stationId","isConfirm"}, new Object[]{mds.getId(),Boolean.FALSE});
		if(mds.getQuantity()-mds.getPickQuantity()>qty){
			return false;
		}else{
			return true;
		}
	}
	
	@SuppressWarnings("unchecked")
	public Boolean checkContainer(String container){
		String hql = "FROM WmsBoxType bt WHERE bt.code =:code AND bt.status =:status";
		WmsBoxType bt = (WmsBoxType) commonDao.findByQueryUniqueResult(hql, new String[]{"code","status"}, new Object[]{container,BaseStatus.ENABLED});
		
		if(bt ==null ){
			return Boolean.FALSE;
		}else{
			hql = "FROM WmsMoveDocAndStation mds WHERE mds.container =:container AND mds.moveDocDetail.moveDoc.shipStatus =:shipStatus ";
			List<WmsMoveDocAndStation> mds = commonDao.findByQuery(hql, new String[]{"container","shipStatus"}, new Object[]{container,WmsMoveDocShipStatus.UNSHIP});
			if(mds.isEmpty()){
				return Boolean.TRUE;
			}else{
				return Boolean.FALSE;
			}
		}
	}
	
	@SuppressWarnings("unchecked")
	public WmsPickContainerDTO getWmsTaskByMoveDocId(Long moveDetailId,String picktype){
		String hql = "SELECT task FROM WmsTask task,WmsLocation loc WHERE task.fromLocationId =loc.id" +
				" AND task.moveDocDetail.id =:moveDetailId " +
				" AND task.status in(:status) AND task.exceptionFlag =:exceptionFlag" +
				" ORDER BY loc.routeNo ASC ";
		WmsTask task = (WmsTask) this.findByHqlLimitQuery(hql, 
				new String[]{"moveDetailId","status","exceptionFlag"}, 
				new Object[]{moveDetailId,Arrays.asList(WmsTaskStatus.DISPATCHED,WmsTaskStatus.WORKING),Boolean.FALSE}, 1);
		if(task == null || task.getUnmovedQuantityBU() == 0){
			return null;
		}
		String type = MyUtils.PARTS,boxTagNo = "",typeName = MyUtils.PARTS;
		//每次先推送量大的容器拣货
		hql = "SELECT DISTINCT w.type,w.quantity,w.boxTag,w.typeName FROM WmsMoveDocAndStation w WHERE w.moveDocDetail.id = "+moveDetailId+
				" AND w.isFinished = false ORDER BY w.quantity DESC";
		List<Object[]> types = commonDao.findByQuery(hql);
		if(types!=null && types.size()>0){
			type = (String) types.get(0)[0];
			boxTagNo = (String) types.get(0)[2];
			typeName = (String) types.get(0)[3];
		}
		WmsItem item = commonDao.load(WmsItem.class, task.getItemKey().getItem().getId());
		WmsPickContainerDTO dto = new WmsPickContainerDTO();
		dto.setTaskId(task.getId());
		dto.setMoveDocAndStationId(null);
		dto.setItemId(item.getId());
		dto.setItemCode(item.getCode());
		dto.setItemName(item.getName());
		dto.setType(type);
		dto.setTypeName(typeName);
		dto.setLocationCode(task.getFromLocationCode());
		dto.setSupplier(task.getMoveDocDetail().getShipLotInfo().getExtendPropC20());//getSupplier()
		dto.setPlanQuantityBU(task.getUnmovedQuantityBU());
		dto.setUnMoveQuantityBU(task.getUnmovedQuantityBU());
		dto.setProductionLine(task.getMoveDocDetail().getProductionLine());
		dto.setBoxTag(boxTagNo);
		return dto;
	}
	public WmsPickContainerDTO confimPickByPart(WmsPickContainerDTO dto){
		String message = MyUtils.SUCCESS;
		WmsTask task = commonDao.load(WmsTask.class, dto.getTaskId());
		WmsMoveDoc moveDoc = commonDao.load(WmsMoveDoc.class, task.getMoveDocDetail().getMoveDoc().getId());
		WmsWorker worker = WmsWorkerHolder.getWmsWorker();
		dto.setPlanQuantityBU(task.getUnmovedQuantityBU());
		WmsMoveDocAndStation w = commonDao.load(WmsMoveDocAndStation.class, dto.getWmsMoveDocAndStationId());
		//如果更换了库位,要验证该库位物料是否满足
		if(!dto.getLocationCode().equals(dto.getPickLocCode())){
			WmsInventory inv =this.getInventoryQtyByLocation(dto.getPickLocCode(),dto.getItemCode(),dto.getSupplier());
			if(inv == null){
				message = "库位["+dto.getPickLocCode()+"]未匹配到库存["+dto.getItemCode()+"]";
				dto.setErrorMes(message);
				saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, message, dto.getContainer());
				return dto;
			}
			if(inv.getAvailableQuantityBU()<dto.getPickQuantity()){
				message = "库位["+dto.getPickLocCode()+"]可用量:"+inv.getAvailableQuantityBU()+"不足";
				dto.setErrorMes(message);
				saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, message, dto.getContainer());
				return dto;
			}
			dto.setInventoryId(inv.getId());
		}else{
			dto.setInventoryId(task.getSrcInventoryId());
		}
		if(!MyUtils.PARTS.equals(dto.getType())){//容器要验证是否超拣
			if(w.getAvailableQuantityBU()<dto.getPickQuantity()){
				message = "拣选量大于容器待拣量:"+w.getAvailableQuantityBU();
				dto.setErrorMes(message);
				saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, message, dto.getContainer());
				return dto;
			}
		}
		if(task.getUnmovedQuantityBU()>0 && task.getUnmovedQuantityBU()>=dto.getPickQuantity()){
			workDocManager.singleConfirm(task, moveDoc.getId(),dto.getPickQuantity(), dto.getInventoryId(), worker.getId());
		}else{
			dto.setErrorMes(ShellExceptions.PICK_QTY_NOT_FULL);
			saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, ShellExceptions.PICK_QTY_NOT_FULL+"["+task.getUnmovedQuantityBU()+"]", dto.getContainer());
			return dto;
		}
		w.setPickQuantity(w.getPickQuantity()+dto.getPickQuantity());
		if(w.getAvailableQuantityBU()==0){
			w.setIsFinished(true);
			message = ShellExceptions.CONTAINER_FULL;
			dto.setErrorMes(message);
		}else{
			message = ShellExceptions.CONTAINER_NOT_FULL;
			dto.setErrorMes(message);
			dto.setOrderBU(w.getAvailableQuantityBU());
		}
		w.setContainer(dto.getContainer());
		commonDao.store(w);
		WmsTaskAndStation wts = EntityFactory.getEntity(WmsTaskAndStation.class);
		wts.setTask(task);
		wts.setStation(w);
		wts.setInventoryId(dto.getInventoryId());
		wts.setPickQuantityBu(dto.getPickQuantity());
		wts.setIsConfirm(Boolean.TRUE);
		wts.setContainer(dto.getContainer());
		commonDao.store(wts);
		dto.setUnMoveQuantityBU(dto.getPlanQuantityBU()-dto.getPickQuantity());//判断当前task是否已拣完
		return dto;
	}
	
	public void markTaskException(Long taskId){
		WmsTask task = commonDao.load(WmsTask.class, taskId);
		task.setExceptionFlag(Boolean.TRUE);
		commonDao.store(task);
	}
	@SuppressWarnings("unchecked")
	public String checkContainerByBoxType(String container,String type,String boxTagNo,Long taskId){
		String hql = "FROM WmsBoxType bt WHERE bt.code =:code AND bt.status =:status";
		if(!MyUtils.PARTS.equals(type)){
			hql += " AND bt.type ='"+type+"'";
		}
		WmsBoxType bt = (WmsBoxType) commonDao.findByQueryUniqueResult(hql, new String[]{"code","status"}, 
				new Object[]{container,BaseStatus.ENABLED});
		if(bt == null){
			saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, ShellExceptions.CONTAINER_TYPE_NOT_EXITS, container);
			return ShellExceptions.CONTAINER_TYPE_NOT_EXITS;
		}
		
		if(!MyUtils.PARTS.equals(type)){
			if(bt.getIsPicking()){
				//容器部分拣货未完成,允许这部分容器继续扫描拣货(相同标签下)
				hql = "SELECT DISTINCT w.boxTag FROM WmsMoveDocAndStation w WHERE w.moveDocDetail.moveDoc.shipStatus =:status" +
						" AND w.container =:container";
				List<String> boxTags = commonDao.findByQuery(hql, new String[]{"status","container"}, 
						new Object[]{WmsMoveDocShipStatus.UNSHIP,container});
				if(boxTags!=null && boxTags.size()>0){
					if(boxTags.size()>1){//同一个容器,只允许存在一个未发运的标签
						saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, ShellExceptions.CONTAINER_TAG_ONE, container);
						return ShellExceptions.CONTAINER_TAG_ONE;
					}
					//如果A标签用了SX001,但是B标签还没用,此时如果选择B扫描SX001,会出现数据库并没有绑定信息,所以boxTags.size的值=1,此处应有提示
					//本方法带入当前容器的标签号,然后和数据库已存在的匹配,匹配不上说明不同标签的容器,报错;
					if(!boxTagNo.equals(boxTags.get(0))){
						saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, ShellExceptions.CONTAINER_IS_USING, container);
						return ShellExceptions.CONTAINER_IS_USING;
					}
					//如果匹配上,验证该容器是否已完成还未发运
					hql = "SELECT COUNT(*) as NUM FROM WmsMoveDocAndStation w WHERE w.boxTag =:boxTag AND w.isFinished = false";
					Long mds = (Long) commonDao.findByQueryUniqueResult(hql, new String[]{"boxTag"}, 
							new Object[]{boxTags.get(0)});
					if(mds<=0){
						saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, ShellExceptions.CONTAINER_IS_USING, container);
						return ShellExceptions.CONTAINER_IS_USING;
					}
				}
			}
		}else{//散件要在扫码和装车之前验证是否已加入过装车单(因为散件制约因素太少,可以理论上无限制的扫描装料)
			if(bt.getIsBol()){
				saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, ShellExceptions.CONTAINER_IN_BOL, container);
				return ShellExceptions.CONTAINER_IN_BOL;
			}else if(bt.getIsPicking()){//验证是否已经存在了不同发货单下的数据,相同发货单下的不同拣货单允许
				hql = "SELECT DISTINCT w.moveDocDetail.moveDoc.originalBillCode FROM WmsMoveDocAndStation w" +
						" WHERE w.moveDocDetail.moveDoc.shipStatus =:status" +
						" AND w.container =:container";
				List<String> originalBillCodes = commonDao.findByQuery(hql, new String[]{"status","container"}, 
						new Object[]{WmsMoveDocShipStatus.UNSHIP,container});
				if(originalBillCodes!=null && originalBillCodes.size()>0){
					if(originalBillCodes.size()>1){
						saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, ShellExceptions.CONTAINER_PART_DIF_PICK, container);
						return ShellExceptions.CONTAINER_PART_DIF_PICK;
					}
					if(taskId!=null){
						WmsTask task = commonDao.load(WmsTask.class, taskId);
						WmsMoveDocDetail moveDocDetail = commonDao.load(WmsMoveDocDetail.class,task.getMoveDocDetail().getId());
						WmsMoveDoc moveDoc = commonDao.load(WmsMoveDoc.class,moveDocDetail.getMoveDoc().getId());
						if(!moveDoc.getOriginalBillCode().equals(originalBillCodes.get(0))){
							saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, ShellExceptions.CONTAINER_PART_DIF_PICK, container);
							return ShellExceptions.CONTAINER_PART_DIF_PICK;
						}
					}
				}
			}
		}
		bt.setIsPicking(true);
		commonDao.store(bt);
		return MyUtils.SUCCESS;
	}
	@SuppressWarnings("unchecked")
	public WmsPickContainerDTO getBindByContainerId(Long moveDetailId,WmsPickContainerDTO dto){
		//每次先推送量大的容器拣货
		String hql = "FROM WmsMoveDocAndStation w WHERE w.moveDocDetail.id =:moveDetailId"+
				" AND w.isFinished = false AND w.type =:type ORDER BY w.quantity DESC";
		List<WmsMoveDocAndStation> wds = commonDao.findByQuery(hql, 
				new String[]{"moveDetailId","type"}, new Object[]{moveDetailId,dto.getType()});
		if(wds==null || wds.size()<=0){
			dto.setErrorMes(ShellExceptions.CONTAINER_NULL_FINISH);
			saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PICKING, dto.getErrorMes(), dto.getType());
			return dto;
		}
		dto.setWmsMoveDocAndStationId(wds.get(0).getId());
		dto.setOrderBU(wds.get(0).getAvailableQuantityBU());
		return dto;
		
	}
	public WmsVehicle checkVehicleByLicense(String license){
		String hql = "FROM WmsVehicle v WHERE v.license =:license and v.status =:status";
		WmsVehicle vehicle = (WmsVehicle) commonDao.findByQueryUniqueResult(hql, 
				new String[]{"license","status"}, new Object[]{license,BaseStatus.ENABLED});
		return vehicle;
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map checkMoveDocByContainer(String container,Map<String,WmsBOLDTO> dtos){
		Map result  = new HashMap();
		/*String hql = "FROM WmsMoveDocAndStation mds WHERE mds.container =:container" +
				" AND (mds.moveDocDetail.moveDoc.status =:status1 OR mds.moveDocDetail.moveDoc.status =:status2)" +
				" AND mds.moveDocDetail.moveDoc.shipStatus =:shipStatus AND mds.isFinished = true";
		List<WmsMoveDocAndStation> mds = commonDao.findByQuery(hql, 
				new String[]{"container","status1","status2","shipStatus"}, 
				new Object[]{container,WmsMoveDocStatus.WORKING,WmsMoveDocStatus.FINISHED,WmsMoveDocShipStatus.UNSHIP});*/
		String hql = "FROM WmsMoveDocAndStation mds WHERE mds.container =:container" +
				" AND mds.shipStatus =:shipStatus AND mds.isFinished = true";
		List<WmsMoveDocAndStation> mds = commonDao.findByQuery(hql, 
				new String[]{"container","shipStatus"}, 
				new Object[]{container,WmsMoveDocShipStatus.UNSHIP});
		result.put(WmsBOLShell.ERROR_MESSAGE, "");
		if(mds.isEmpty()){
			result.put(WmsBOLShell.ERROR_MESSAGE, ShellExceptions.CONTAINER_NOT_PICKING);
			saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_BOL,  ShellExceptions.CONTAINER_NOT_PICKING, container);
			
			result.put(WmsBOLShell.CURRENT_DTOS, dtos);
			return result;
		}else{
			if(mds.size()>1){
				//器具型号
				String type = "";
				//判断器具标签是否相同
				Set<String> boxTagNo = new HashSet<String>();
				for(WmsMoveDocAndStation w : mds){
					boxTagNo.add(w.getBoxTag());
					type = w.getType();
				}
				if(boxTagNo.size()>1 && !MyUtils.PARTS.equals(type)){
					result.put(WmsBOLShell.ERROR_MESSAGE, ShellExceptions.CONTAINER_UNSHIP_MOVE);
					saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_BOL, ShellExceptions.CONTAINER_UNSHIP_MOVE, container);
					
					result.put(WmsBOLShell.CURRENT_DTOS, dtos);
					return result;
				}
			}
			hql = "FROM WmsBoxType bt WHERE bt.code =:code AND bt.status =:status ";
			WmsBoxType bt = (WmsBoxType) commonDao.findByQueryUniqueResult(hql, 
					new String[]{"code","status"}, new Object[]{container,BaseStatus.ENABLED});
			if(bt.getIsBol()){
				result.put(WmsBOLShell.ERROR_MESSAGE, ShellExceptions.CONTAINER_IN_BOL);
				saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_BOL, ShellExceptions.CONTAINER_IN_BOL, container);
				
				result.put(WmsBOLShell.CURRENT_DTOS, dtos);
				return result;
			}else{
				WmsMoveDoc doc = commonDao.load(WmsMoveDoc.class, mds.get(0).getMoveDocDetail().getMoveDoc().getId());
				WmsBOLDTO dto = null;
				if(dtos.containsKey(doc.getOriginalBillCode())){
					dto = dtos.get(doc.getOriginalBillCode());
				}else{
					dto = new WmsBOLDTO();
				}
				dto.getContainers().add(container);
				dtos.put(doc.getOriginalBillCode(), dto);
				result.put(WmsBOLShell.CURRENT_DTOS, dtos);
//				if(dto.getPickCode() == null){
//					dto.setPickCode(doc.getOriginalBillCode());
//				}else if(!doc.getOriginalBillCode().equals(dto.getPickCode())){
//					dto.setMessage("不是发货单："+dto.getPickCode()+"的料");
//					saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_BOL, dto.getMessage()+":"+container, container);
//				}
			}
		}
		return result;
	}
	
	public void createWmsBol(Map<String, WmsBOLDTO> dtos,String license){
		WmsVehicle vehicle = checkVehicleByLicense(license);
		Iterator<Entry<String, WmsBOLDTO>> iterator = dtos.entrySet().iterator();
		while(iterator.hasNext()){
			Entry<String, WmsBOLDTO> entry = iterator.next();
			String pickCode = entry.getKey();
			WmsBOLDTO dto = entry.getValue();
			createWmsBolDo(dto, vehicle, license, pickCode);
		}
		
		
	}
	@SuppressWarnings("unchecked")
	private void createWmsBolDo(WmsBOLDTO dto,WmsVehicle vehicle,String license,String pickCode){
		Set<String> containers = dto.getContainers();
		if(containers.size()<=0){
			return;
		}
		//创建装车单
		WmsBOL bol = EntityFactory.getEntity(WmsBOL.class);
		bol.setWarehouse(WmsWarehouseHolder.getWmsWarehouse());
		bol.setCode(codeManager.generateCodeByRule(bol.getWarehouse(), 
				bol.getWarehouse().getName(), "装车单", ""));
		bol.setVehicle(vehicle);
		bol.setVehicleNo(license);
		bol.setWmsDriver(vehicle.getMasterDriver());
		bol.setPickCode(pickCode);
		String hql = "FROM WmsPickTicket pick WHERE pick.code=:code ";
		WmsPickTicket pick = (WmsPickTicket) commonDao.findByQueryUniqueResult(hql, "code", pickCode);
		bol.setBillTypeName(pick.getBillType().getName());
		bol.setRequireArriveDate(pick.getRequireArriveDate());
		workflowManager.doWorkflow(bol, "masterBOLProcess.new");
		
		Iterator<String> it = containers.iterator();
		Map<String,String> subMap = new HashMap<String, String>();
		while(it.hasNext()){
			String container = it.next();
			hql = "FROM WmsMoveDocAndStation mds WHERE mds.container =:container" +
					" AND (mds.moveDocDetail.moveDoc.status =:status1 OR mds.moveDocDetail.moveDoc.status =:status2)" +
					" AND mds.moveDocDetail.moveDoc.shipStatus =:shipStatus AND mds.isFinished = true AND mds.isBol = false";
			List<WmsMoveDocAndStation> mds = commonDao.findByQuery(hql, 
					new String[]{"container","status1","status2","shipStatus"}, 
					new Object[]{container,WmsMoveDocStatus.WORKING,WmsMoveDocStatus.FINISHED,WmsMoveDocShipStatus.UNSHIP});
			if(mds.size() <= 0){
				throw new BusinessException("未找到符合要求的器具!!");//(拣货单状态=作业中或完成,发运状态=未发运,器具已经完成并未加入装车单)
			}
			WmsMoveDoc doc = commonDao.load(WmsMoveDoc.class, mds.get(0).getMoveDocDetail().getMoveDoc().getId());
			
			//加入装车单明细
			Integer detailLineNo = null;
			for(WmsMoveDocAndStation wmds : mds){
				hql = "FROM WmsTaskAndStation ts WHERE ts.station.id = :stationId AND ts.isJoinBOL =:isJoinBOL ";
				List<WmsTaskAndStation> wtss = commonDao.findByQuery(hql, 
						new String[]{"stationId","isJoinBOL"}, 
						new Object[]{wmds.getId(),Boolean.FALSE});
				int lineNo = 0;
				for(WmsTaskAndStation wts : wtss){
					WmsTask task = commonDao.load(WmsTask.class, wts.getTask().getId());
					WmsItemKey itemKey = commonDao.load(WmsItemKey.class, task.getItemKey().getId());
					WmsMoveDoc moveDoc = commonDao.load(WmsMoveDoc.class,task.getMoveDocDetail().getMoveDoc().getId());
					WmsPickTicketDetail pickDetail = commonDao.load(WmsPickTicketDetail.class, task.getMoveDocDetail().getRelatedId());
					WmsPickTicket pickTicket = commonDao.load(WmsPickTicket.class,pickDetail.getPickTicket().getId());
					hql = "FROM WmsBOLDetail bd WHERE bd.bol.id =:bolId AND bd.task.id =:taskId AND bd.container =:container ";
					WmsBOLDetail bolDetail = (WmsBOLDetail) commonDao.findByQueryUniqueResult(hql, 
							new String[]{"bolId","taskId","container"}, 
							new Object[]{bol.getId(),task.getId(),wts.getContainer()});
					if(bolDetail != null){
						bolDetail.setQuantity(bolDetail.getQuantity() + wts.getPickQuantityBu());
	                    bolDetail.setQuantityBU(bolDetail.getQuantityBU() + wts.getPickQuantityBu());
					}else{
	                    //生成装车单明细
	                    bolDetail = EntityFactory.getEntity(WmsBOLDetail.class);
	                    
	                    if(detailLineNo==null){
	                    	hql = "SELECT MAX(detail.lineNo) FROM WmsBOLDetail detail WHERE detail.bol.id =:bolId ";
	                    	detailLineNo = (Integer) commonDao.findByQueryUniqueResult(hql, "bolId", bol.getId());
	                    	if(detailLineNo==null){
	                    		detailLineNo = 0;
	                    	}
	                    }
	                    bolDetail.setLineNo(detailLineNo+1);
	                    
	                    WmsPackageUnit packageUnit = task.getPackageUnit();
	                    if(itemKey!=null){
	                        bolDetail.setItemKey(itemKey);
	                    }
	                    bolDetail.setPackageUnit(packageUnit);
	                    bolDetail.setPallet(BaseStatus.NULLVALUE);
	                    bolDetail.setQuantity(wts.getPickQuantityBu());
	                    bolDetail.setQuantityBU(wts.getPickQuantityBu());
	                    bolDetail.setTask(task);
	                    bolDetail.setSlr(doc.getBlg().getCode());
	                    bolDetail.setTfd(pick.getReceiveDoc());
	                    bolDetail.setProductionLine(pickDetail.getProductionLine());
	                    bolDetail.setRequireArriveDate(pick.getRequireArriveDate());
	                    bolDetail.setContainer(wts.getContainer());
	                    bolDetail.setBoxTag(wmds.getBoxTag());
	                    commonDao.store(bolDetail);
	                    bolDetail = commonDao.load(WmsBOLDetail.class, bolDetail.getId());
	                    String subCode = "";
	                    String key = pickDetail.getProductionLine()==null ? "-" : pickDetail.getProductionLine();
	                    if(subMap.containsKey(key)){
	                    	subCode = subMap.get(key);
	                    }else{
	                    	lineNo++;
	                    	subCode = "WMS_"+bolDetail.getId()+StringHelper.addCharBeforeStr(lineNo+"", 3, "0");
	                    	subMap.put(key, subCode);
	                    }
	                    bolDetail.setSubCode(subCode);
	                    bolDetail.setBol(bol);
	                    
	                    detailLineNo += bolDetail.getLineNo();
					}
					wts.setIsJoinBOL(Boolean.TRUE);
	                commonDao.store(wts);
					bol.addDetail(bolDetail);
		            this.commonDao.store(bolDetail);
		            bol.refreshQuantity();
		            commonDao.store(bol);
		            
		            WmsBolDetailExtend bolExt = new WmsBolDetailExtend(bolDetail, moveDoc.getRelatedBill1(), pickTicket.getOdrSu(),wmds.getFromStorage(), 
		            		 wmds.getToStorage(), wmds.getDockNo(), pickDetail.getFromSource(), pickTicket.getBatch(), pickDetail.getStation(), 
		            		pickDetail.getIsJp(), wmds.getType(), wmds.getBoxTag(), pickDetail.getPackageQty(), pickDetail.getSx(),
		            		wmds.getLoadage(),wmds.getContainer(),wmds.getSx(),wmds.getSeq(),wmds.getEndseq(),wts.getPickQuantityBu());
		            commonDao.store(bolExt);
				}
				hql = "FROM WmsBoxType bt WHERE bt.code =:code ";
				WmsBoxType bt = (WmsBoxType) commonDao.findByQueryUniqueResult(hql, new String[]{"code"}, new Object[]{container});
				bt.setIsBol(Boolean.TRUE);
				commonDao.store(bt);
				
				wmds.setIsBol(Boolean.TRUE);
				commonDao.store(wmds);
			}
		}
		workDocManager.upBolTagsNum(bol);
	}
	
	@SuppressWarnings("unchecked")
	public List<Object[]> findUnPickMove(Long moveDocId){
		String hql = " SELECT det.id,det.item.code,det.planQuantityBU - det.movedQuantityBU FROM WmsMoveDocDetail det " +
				" WHERE 1=1 AND det.planQuantityBU-det.movedQuantityBU > 0 " +
				" AND det.moveDoc.id = "+moveDocId;
		List<Object[]> moveDocDetails = commonDao.findByQuery(hql);
		if(moveDocDetails==null || moveDocDetails.size()<=0){
			return null;
		}
		List<Object[]> viewObjs = new ArrayList<Object[]>();
		for(Object[] o : moveDocDetails){
			hql = "SELECT DISTINCT w.isPartPick FROM WmsMoveDocAndStation w WHERE w.moveDocDetail.id = "+Long.parseLong(o[0].toString());
			List<Boolean> list = commonDao.findByQuery(hql);
			if(list!=null && list.size()>0){
				viewObjs.add(new Object[]{
						o[0],o[1],o[2],list.get(0)?MyUtils.PARTS:MyUtils.CONTAINER
				});
			}else{
				viewObjs.add(new Object[]{
						o[0],o[1],o[2],MyUtils.PARTS
				});
			}
		}
		
		return viewObjs;
	}
	//获取时序件容器汇总信息
	@SuppressWarnings("unchecked")
	public List<Object[]> findUnAppliance(Long moveDocId){
		String sql = "select w.type,w.type_name,count(distinct w.item_id) as counts,sum(w.quantity) as nums,w.box_tag,w.CONTAINER"+ 
				" from "+WmsTables.WMS_MOVEDOC_AND_STATION+" w "+
				" left join "+WmsTables.WMS_MOVE_DOC_DETAIL+" mm on mm.id = w.movedoc_detail_id"+
				" left join "+WmsTables.WMS_MOVE_DOC+" m on m.id = mm.move_doc_id"+
				" where m.id = ? AND w.IS_FINISHED = 'N'"+
				" group by w.type,w.type_name,w.box_tag,w.CONTAINER"+
				" order by w.box_tag";
		List<Object[]> list = jdbcTemplate.queryForList(sql, new Object[]{moveDocId});
		return list;
	}
	//统计标签是否已拣货
	public Integer sumPickQtys(Long moveDocId,String boxTagNo){
		String sql = "select sum(w.pick_quantity) as pick_quantity" +
				" from "+WmsTables.WMS_MOVEDOC_AND_STATION+" w "+
				" left join "+WmsTables.WMS_MOVE_DOC_DETAIL+" mm on mm.id = w.movedoc_detail_id"+
				" left join "+WmsTables.WMS_MOVE_DOC+" m on m.id = mm.move_doc_id"+
				" where m.id = ? AND w.box_tag = ?";
		int picQty = jdbcTemplate.queryForInt(sql, new Object[]{moveDocId,boxTagNo});
		return picQty;
	}
	@SuppressWarnings("unchecked")
	public List<Object[]> findUnApplianceItems(Long moveDocId,String boxTagNo){
		String sql = "select w.id,i.code as item_code,(w.quantity-w.pick_quantity) as quantity,w.seq,w.end_seq,mm.id as mm_id" +
				" from "+WmsTables.WMS_MOVEDOC_AND_STATION+" w "+ 
				" left join "+WmsTables.WMS_MOVE_DOC_DETAIL+" mm on mm.id = w.movedoc_detail_id"+
				" left join "+WmsTables.WMS_MOVE_DOC+" m on m.id = mm.move_doc_id" +
				" left join "+WmsTables.WMS_ITEM+" i on i.id = mm.item_id"+
				" where m.id = ? and w.box_tag = ? AND w.IS_FINISHED = 'N'"+
				" order by w.seq desc";
		List<Object[]> list = jdbcTemplate.queryForList(sql, new Object[]{moveDocId,boxTagNo});
		return list;
	}
	
	public void getBindByContainerId(Long moveDocId,String boxTagNo,String container){
		String sql = "update "+WmsTables.WMS_MOVEDOC_AND_STATION+" wds set wds.container = ? where exists "+
				" (select 1 from "+WmsTables.WMS_MOVEDOC_AND_STATION+" w "+
				" left join "+WmsTables.WMS_MOVE_DOC_DETAIL+" mm on mm.id = w.movedoc_detail_id"+
				" left join "+WmsTables.WMS_MOVE_DOC+" m on m.id = mm.move_doc_id"+
				" left join "+WmsTables.WMS_ITEM+" i on i.id = mm.item_id"+
				" where m.id = ?"+
				" and w.box_tag = ? "+
				" and wds.id = w.id)";
		jdbcTemplate.update(sql, new Object[]{container,moveDocId,boxTagNo});
	}
	
	public void saveLogs(String logType,String logTitle,String exception,String message){
		WmsTaskManager wmsTaskManager = (WmsTaskManager) applicationContext.getBean("wmsTaskManager");
		wmsTaskManager.saveWmsJobLog(logType, logTitle, exception, message);
	}
	public void releaseContainer(String container){
		String hql = "FROM WmsBoxType bt WHERE bt.code =:code";
		WmsBoxType bt = (WmsBoxType) commonDao.findByQueryUniqueResult(hql, new String[]{"code"}, 
				new Object[]{container});
		if(bt!=null){
			bt.setIsPicking(false);
			commonDao.store(bt);
			saveLogs(WmsLogType.NOTES, WmsLogTitle.CONTAINER_RELEASE, container, container);
		}
	}
	
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map checkContainerPicking(String container){
		Map result = new HashMap();
		String hql = "SELECT mds.id FROM WmsMoveDocAndStation mds WHERE mds.container =:container" +
				" AND mds.pickQuantity > 0"
				+" AND mds.isBol =:isBol"
				;//已拣货但是未加入过装车单的
		List<Long> ids = commonDao.findByQuery(hql, 
				new String[]{"container","isBol"}, new Object[]{container,Boolean.FALSE});
		if(ids!=null && ids.size()>0){
			result.put(WmsPickBackMoveDocShell.CURRENT_MDIDS, ids);
		}else{
			result.put(WmsPickBackMoveDocShell.ERROR_MESSAGE, "提示:容器没有符合条件的已拣货信息");
		}
		return result;
	}
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map getContainerList(List<Long> ids,String container){
		Map result = new HashMap();
		List<Object[]> list = new ArrayList<Object[]>();
		for(Long id : ids){
			WmsMoveDocAndStation mds = commonDao.load(WmsMoveDocAndStation.class, id);
			WmsMoveDocDetail moveDocDetail = commonDao.load(WmsMoveDocDetail.class, mds.getMoveDocDetail().getId());
			WmsItem item = commonDao.load(WmsItem.class, moveDocDetail.getItem().getId());
			list.add(new Object[]{
					id,item.getCode(),mds.getPickQuantity()
			});
		}
		result.put(WmsPickBackMoveDocShell.CURRENT_LIST, list);
		return result;
	}
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map checkContainerList(Long id){
		Map result = new HashMap();
		result.put(WmsPickBackMoveDocShell.ERROR_MESSAGE, "");
		String hql = "FROM WmsTaskAndStation ts WHERE ts.station.id = :stationId AND ts.isJoinBOL =:isJoinBOL ";
		List<WmsTaskAndStation> wtss = commonDao.findByQuery(hql, 
				new String[]{"stationId","isJoinBOL"}, 
				new Object[]{id,Boolean.FALSE});
		List<Object[]> list = new ArrayList<Object[]>();
		if(wtss!=null && wtss.size()>1){
			Map<String,List<Object[]>> supMap = new HashMap<String, List<Object[]>>();
			List<Object[]> supList = null;
			Map<String,Double> supQty = new HashMap<String, Double>();
			Double picQty = 0D;
			String key = null;
			for(WmsTaskAndStation ts : wtss){
				WmsTask task = commonDao.load(WmsTask.class, ts.getTask().getId());
				WmsItemKey itemKey = commonDao.load(WmsItemKey.class, task.getItemKey().getId());
				WmsItem item = commonDao.load(WmsItem.class,itemKey.getItem().getId());
				WmsOrganization supplier = commonDao.load(WmsOrganization.class,itemKey.getLotInfo().getSupplier().getId());
				key = supplier.getCode();
				if(supMap.containsKey(key)){
					supList = supMap.get(key);
					picQty = supQty.get(key);
				}else{
					supList = new ArrayList<Object[]>();
					picQty = 0D;
					supList.add(new Object[]{
							item.getCode(),item.getName(),supplier.getCode()
					});
				}
				picQty += ts.getPickQuantityBu();
				supMap.put(key, supList);
				supQty.put(key, picQty);
			}
			Iterator<Entry<String, List<Object[]>>> iter = supMap.entrySet().iterator();
			while(iter.hasNext()){
				Entry<String, List<Object[]>> entry = iter.next();
				List<Object[]> ll = entry.getValue();
				for(Object[] o : ll){
					list.add(new Object[]{//itemcode,itemname,supcode,qty
							o[0],o[1],o[2],supQty.get(entry.getKey())
					});
				}
			}
		}else if(wtss==null || wtss.size()<=0){
			WmsMoveDocAndStation mds = commonDao.load(WmsMoveDocAndStation.class, id);
			saveLogs(WmsLogType.ERROR, WmsLogTitle.CONTAINER_PIC_BACK, ShellExceptions.PICK_BACK_IS_NULL, mds.getBoxTag());
			result.put(WmsPickBackMoveDocShell.ERROR_MESSAGE, ShellExceptions.PICK_BACK_IS_NULL);
		}else{
			WmsTask task = commonDao.load(WmsTask.class, wtss.get(0).getTask().getId());
			WmsItemKey itemKey = commonDao.load(WmsItemKey.class, task.getItemKey().getId());
			WmsItem item = commonDao.load(WmsItem.class,itemKey.getItem().getId());
			WmsOrganization supplier = commonDao.load(WmsOrganization.class,itemKey.getLotInfo().getSupplier().getId());
			list.add(new Object[]{//itemcode,itemname,supcode,qty
					item.getCode(),item.getName(),supplier.getCode(),wtss.get(0).getPickQuantityBu()
			});
		}
		result.put(WmsPickBackMoveDocShell.CURRENT_LIST, list);
		return result;
		
	}
	@SuppressWarnings({ "unchecked", "rawtypes" })
	public Map containerPickBack(Long id,String supCode,Double pickBackQty,String descLoc){
		Map result = new HashMap();
		result.put(WmsPickBackMoveDocShell.ERROR_MESSAGE, "");
		String hql = "FROM WmsLocation loc WHERE loc.code =:code AND loc.status =:status AND loc.type =:type";
		WmsLocation toLocation = (WmsLocation) commonDao.findByQueryUniqueResult(hql, 
				new String[]{"code","status","type"}, new Object[]{descLoc,BaseStatus.ENABLED,WmsLocationType.STORAGE});
		if(toLocation==null){
			result.put(WmsPickBackMoveDocShell.ERROR_MESSAGE, "错误:存货库位信息有误");
		}else{
			hql = "FROM WmsTaskAndStation ts WHERE ts.station.id = :stationId AND ts.isJoinBOL =:isJoinBOL" +
					" ORDER BY ts.pickQuantityBu";
			List<WmsTaskAndStation> wtss = commonDao.findByQuery(hql, 
					new String[]{"stationId","isJoinBOL"},new Object[]{id,Boolean.FALSE});
			Double quantityBU = 0D,backQty = 0D;
			for(WmsTaskAndStation ts : wtss){
				if(pickBackQty<=0){
					break;
				}
				WmsTask task = commonDao.load(WmsTask.class, ts.getTask().getId());
				WmsItemKey itemKey = commonDao.load(WmsItemKey.class, task.getItemKey().getId());
				WmsOrganization supplier = commonDao.load(WmsOrganization.class,itemKey.getLotInfo().getSupplier().getId());
				if(!supCode.equals(supplier.getCode())){
					continue;
				}
				quantityBU = ts.getPickQuantityBu()>=pickBackQty?pickBackQty:ts.getPickQuantityBu();
				workDocManager.unPickConfirm(ts, supCode, quantityBU, toLocation.getId());
				ts.cancelPickedQuantityBU(quantityBU);
				if(ts.getPickQuantityBu()<=0){
					ts.setStation(null);
					commonDao.delete(ts);
				}else{
					commonDao.store(ts);
				}
				backQty += quantityBU;
				pickBackQty -= quantityBU;
				
				if(task.getPlanQuantityBU()<=0){
					task.removeMove();
					commonDao.store(task);
				}
			}
			WmsMoveDocAndStation mds = commonDao.load(WmsMoveDocAndStation.class, id);
			mds.cancelPickQuantity(backQty);
			commonDao.store(mds);
			saveLogs(WmsLogType.NOTES, WmsLogTitle.CONTAINER_PIC_BACK, mds.getBoxTag(), descLoc+"->"+backQty+"->"+supCode);
		}
		return result;
	}
}
